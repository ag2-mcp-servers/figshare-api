# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:08:44+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class Account(BaseModel):
    active: int = Field(..., description='Account activity status', examples=[0])
    created_date: str = Field(
        ...,
        description='Date when account was created',
        examples=['2018-05-22T04:04:04'],
    )
    email: str = Field(..., description='User email', examples=['user@domain.com'])
    first_name: str = Field(..., description='First Name', examples=['Doe'])
    group_id: int = Field(..., description='Account group id', examples=[0])
    id: int = Field(..., description='Account id', examples=[1495682])
    institution_id: int = Field(..., description='Account institution', examples=[1])
    institution_user_id: str = Field(
        ..., description='Account institution user id', examples=['djohn42']
    )
    last_name: str = Field(..., description='Last Name', examples=['John'])
    maximum_file_size: int = Field(
        ..., description='Maximum upload size for account', examples=[0]
    )
    modified_date: str = Field(
        ...,
        description='Date of last account modification',
        examples=['2018-05-22T04:04:04'],
    )
    pending_quota_request: bool = Field(
        ..., description='True if a quota request is pending', examples=[True]
    )
    quota: int = Field(..., description='Account quota', examples=[0])
    used_quota: int = Field(..., description='Account total used quota', examples=[0])
    used_quota_private: int = Field(
        ..., description='Account used private quota', examples=[0]
    )
    used_quota_public: int = Field(
        ..., description='Account public used quota', examples=[0]
    )


class AccountCreate(BaseModel):
    email: constr(min_length=3, max_length=150) = Field(
        ..., description='Email of account', examples=['johndoe@example.com']
    )
    first_name: constr(max_length=30) = Field(
        ..., description='First Name', examples=['John']
    )
    group_id: Optional[int] = Field(
        None,
        description='Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups',
    )
    institution_user_id: Optional[constr(max_length=50)] = Field(
        '', description='Institution user id', examples=['johndoe']
    )
    is_active: Optional[bool] = Field(None, description='Is account active')
    last_name: Optional[constr(max_length=30)] = Field(
        '', description='Last Name', examples=['Doe']
    )
    quota: Optional[int] = Field(None, description='Account quota', examples=[1000])
    symplectic_user_id: Optional[constr(max_length=50)] = Field(
        '', description='Symplectic user id', examples=['johndoe']
    )


class AccountGroupRoles(BaseModel):
    pass


class AccountGroupRolesCreate(BaseModel):
    pass


class Status(Enum):
    missing = 'missing'
    pending = 'pending'
    done = 'done'


class AccountReport(BaseModel):
    account_id: int = Field(
        ..., description='The ID of the account which generated this report.'
    )
    created_date: str = Field(
        ...,
        description='Date when the AccountReport was requested',
        examples=['2017-05-15T15:12:26Z'],
    )
    download_url: str = Field(
        ...,
        description='The download link for the generated XLSX',
        examples=['https://some.com/storage/path/123/report-456.xlsx'],
    )
    group_id: int = Field(
        ..., description='The group ID that was used to filter the report, if any.'
    )
    id: int = Field(..., description='A unique ID for the AccountRecord')
    status: Status = Field(..., description='Status of the report')


class AccountUpdate(BaseModel):
    group_id: int = Field(
        ...,
        description='Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups',
    )
    is_active: bool = Field(..., description='Is account active')


class ArticleConfidentiality(BaseModel):
    is_confidential: bool = Field(
        ..., description='True if article is confidential', examples=[True]
    )
    reason: str = Field(
        ..., description='Reason for confidentiality', examples=['need to']
    )


class ArticleDOI(BaseModel):
    doi: str = Field(
        ..., description='Reserved DOI', examples=['10.5072/FK2.FIGSHARE.20345']
    )


class ArticleEmbargo(BaseModel):
    embargo_date: str = Field(
        ..., description='Date when embargo lifts', examples=['2018-05-22T04:04:04']
    )
    embargo_options: List[Dict[str, Any]] = Field(
        ...,
        description='List of embargo permissions that are associated with the article. If the type is logged_in and the group_ids list is empty, then the whole institution can see the article; if there are multiple group_ids, then only users that are under those groups can see the article.',
        examples=[
            [
                {'group_ids': [], 'id': 13, 'ip_name': 'bacau', 'type': 'ip_range'},
                {
                    'group_ids': [550, 9448],
                    'id': 12,
                    'ip_name': '',
                    'type': 'logged_in',
                },
            ]
        ],
    )
    embargo_reason: str = Field(..., description='Reason for embargo', examples=[''])
    embargo_title: str = Field(
        ..., description='Title for embargo', examples=['File(s) under embargo']
    )
    embargo_type: str = Field(..., description='Embargo type', examples=[''])
    is_embargoed: bool = Field(..., description='True if embargoed', examples=[True])


class EmbargoType(Enum):
    article = 'article'
    file = 'file'


class ArticleEmbargoUpdater(BaseModel):
    embargo_date: str = Field(
        ...,
        description="Date when the embargo expires and the article gets published, '0' value will set up permanent embargo",
        examples=['2018-05-22T04:04:04'],
    )
    embargo_options: Optional[List[Dict[str, Any]]] = Field(
        None,
        description="List of embargo permissions to be associated with the article. The list must contain `id` and can also contain `group_ids`(a field that only applies to 'logged_in' permissions). The new list replaces old options in the database, and an empty list removes all permissions for this article. Administration permission has to be set up alone but logged in and IP range permissions can be set up together.",
        examples=[
            [{'id': 1321}, {'id': 3345}, {'group_ids': [4332, 5433, 678], 'id': 54621}]
        ],
    )
    embargo_reason: Optional[str] = Field(
        None, description='Reason for setting embargo', examples=['']
    )
    embargo_title: Optional[str] = Field(
        None, description='Title for embargo', examples=['File(s) under embargo']
    )
    embargo_type: EmbargoType = Field(
        ...,
        description='Embargo can be enabled at the article or the file level. Possible values: article, file',
        examples=['file'],
    )
    is_embargoed: bool = Field(..., description='Embargo status', examples=[True])


class ArticleHandle(BaseModel):
    handle: str = Field(
        ..., description='Reserved Handle', examples=['11172/FK2.FIGSHARE.20345']
    )


class Order(Enum):
    published_date = 'published_date'
    modified_date = 'modified_date'
    views = 'views'
    shares = 'shares'
    downloads = 'downloads'
    cites = 'cites'


class ArticleVersions(BaseModel):
    url: str = Field(
        ...,
        description='Api endpoint for the item version',
        examples=['https://api.figshare.com/v2/articles/2000005/versions/1'],
    )
    version: int = Field(..., description='Version number', examples=[1])


class ArticlesCreator(BaseModel):
    articles: List[int] = Field(
        ..., description='List of article ids', examples=[[2000003, 2000004]]
    )


class Author(BaseModel):
    full_name: str = Field(..., description='Author full name', examples=['John Doe'])
    id: int = Field(..., description='Author id', examples=[97657])
    is_active: bool = Field(
        ..., description='True if author has published items', examples=[1]
    )
    orcid_id: str = Field(
        ..., description='Author Orcid', examples=['1234-5678-9123-1234']
    )
    url_name: str = Field(..., description='Author url name', examples=['John_Doe'])


class AuthorComplete(Author):
    first_name: str = Field(..., description='First Name')
    group_id: int = Field(..., description='Group id')
    institution_id: int = Field(..., description='Institution id')
    is_public: int = Field(..., description='if 1 then the author has published items')
    job_title: str = Field(..., description='Job title')
    last_name: str = Field(..., description='Last Name')
    id: int = Field(..., description='Author id', examples=[97657])
    full_name: str = Field(..., description='Author full name', examples=['John Doe'])
    url_name: str = Field(..., description='Author url name', examples=['John_Doe'])
    orcid_id: str = Field(
        ..., description='Author Orcid', examples=['1234-5678-9123-1234']
    )
    is_active: bool = Field(
        ..., description='True if author has published items', examples=[1]
    )


class AuthorsCreator(BaseModel):
    authors: List[Dict[str, Any]] = Field(
        ...,
        description='List of authors to be associated with the article. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.',
        examples=[[{'id': 12121}, {'id': 34345}, {'name': 'John Doe'}]],
    )


class CategoriesCreator(BaseModel):
    categories: List[int] = Field(
        ..., description='List of category ids', examples=[[1, 10, 11]]
    )


class Category(BaseModel):
    id: int = Field(..., description='Category id', examples=[11])
    parent_id: int = Field(..., description='Parent category', examples=[1])
    path: str = Field(
        ..., description='Path to all ancestor ids', examples=['/450/1024/6532']
    )
    source_id: str = Field(
        ..., description='ID in original standard taxonomy', examples=['300204']
    )
    taxonomy_id: int = Field(
        ..., description='Internal id of taxonomy the category is part of', examples=[4]
    )
    title: str = Field(..., description='Category title', examples=['Anatomy'])


class Collaborator(BaseModel):
    name: str = Field(..., description='Collaborator name', examples=['name'])
    role_name: str = Field(..., description='Collaborator role', examples=['Owner'])
    user_id: int = Field(..., description='Collaborator id', examples=[1])


class CollectionDOI(BaseModel):
    doi: str = Field(
        ..., description='Reserved DOI', examples=['10.5072/FK2.FIGSHARE.20345']
    )


class CollectionHandle(BaseModel):
    handle: str = Field(
        ..., description='Reserved Handle', examples=['11172/FK2.FIGSHARE.20345']
    )


class CollectionPrivateLinkCreator(BaseModel):
    expires_date: Optional[str] = Field(
        None,
        description='Date when this private link should expire - optional. By default private links expire in 365 days.',
        examples=['2018-02-22 22:22:22'],
    )
    read_only: Optional[bool] = Field(
        None,
        description='Optional, default true. Set to false to give private link users editing rights for this collection.',
        examples=[True],
    )


class Order1(Enum):
    published_date = 'published_date'
    modified_date = 'modified_date'
    views = 'views'
    shares = 'shares'
    cites = 'cites'


class CollectionVersions(BaseModel):
    id: int = Field(..., description='Version number', examples=[1])
    url: str = Field(
        ...,
        description='Api endpoint for the collection version',
        examples=['https://api.figshare.com/v2/collections/2000005/versions/1'],
    )


class OrderDirection(Enum):
    asc = 'asc'
    desc = 'desc'


class CommonSearch(BaseModel):
    group: Optional[int] = Field(
        None, description='only return collections from this group', examples=[2000013]
    )
    institution: Optional[int] = Field(
        None,
        description='only return collections from this institution',
        examples=[2000013],
    )
    limit: Optional[conint(ge=1, le=1000)] = Field(
        None,
        description='Number of results included on a page. Used for pagination with query',
        examples=[10],
    )
    modified_since: Optional[str] = Field(
        None,
        description='Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD',
        examples=['2017-12-22'],
    )
    offset: Optional[conint(ge=0, le=5000)] = Field(
        None,
        description='Where to start the listing(the offset of the first result). Used for pagination with limit',
        examples=[0],
    )
    order_direction: Optional[OrderDirection] = Field(
        'desc', description='Direction of ordering', examples=['desc']
    )
    page: Optional[conint(ge=1, le=5000)] = Field(
        None,
        description='Page number. Used for pagination with page_size',
        examples=[1],
    )
    page_size: Optional[conint(ge=1, le=1000)] = Field(
        10,
        description='The number of results included on a page. Used for pagination with page',
        examples=[10],
    )
    published_since: Optional[str] = Field(
        None,
        description='Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD',
        examples=['2017-12-22'],
    )
    search_for: Optional[str] = Field(
        None, description='Search term', examples=['figshare']
    )


class ConfidentialityCreator(BaseModel):
    reason: str = Field(..., description='Reason for confidentiality')


class CreateProjectResponse(BaseModel):
    entity_id: int = Field(
        ..., description='Figshare ID of the entity', examples=[33334444]
    )
    location: str = Field(..., description='Url for entity')


class Status1(Enum):
    pending = 'pending'
    approved = 'approved'
    rejected = 'rejected'
    closed = 'closed'


class Curation(BaseModel):
    account_id: int = Field(
        ...,
        description='The ID of the account of the owner of the article of this review.',
    )
    article_id: int = Field(..., description='The ID of the article of this review.')
    assigned_to: int = Field(
        ..., description='The ID of the account to which this review is assigned.'
    )
    comments_count: int = Field(
        ..., description='The number of comments in the review.'
    )
    created_date: str = Field(..., description='The creation date of the review.')
    group_id: int = Field(..., description='The group in which the article is present.')
    id: int = Field(..., description='The review id')
    modified_date: str = Field(
        ..., description='The date the review has been modified.'
    )
    review_date: str = Field(
        ..., description='The last time a comment has been added to the review.'
    )
    status: Status1 = Field(..., description='The status of the review.')
    version: int = Field(
        ..., description='The Version number of the article in review.'
    )


class Type(Enum):
    comment = 'comment'
    approved = 'approved'
    rejected = 'rejected'
    closed = 'closed'


class CurationComment(BaseModel):
    account_id: int = Field(
        ..., description='The ID of the account which generated this comment.'
    )
    id: int = Field(..., description='The ID of the comment.')
    text: str = Field(..., description='The value/content of the comment.')
    type: Type = Field(
        ..., description='The ID of the account which generated this comment.'
    )


class CurationCommentCreate(BaseModel):
    text: constr(min_length=1, max_length=2000) = Field(
        ..., description='The contents/value of the comment'
    )


class CustomArticleField(BaseModel):
    is_mandatory: bool = Field(
        ..., description='True if field completion is mandatory', examples=[False]
    )
    name: str = Field(..., description='Custom  metadata name', examples=['key'])
    value: str = Field(..., description='Custom metadata value', examples=['value'])


class CustomArticleFieldAdd(BaseModel):
    name: str = Field(..., description='Custom  metadata name', examples=['key'])
    value: Any = Field(..., description='Custom metadata value', examples=['value'])


class ErrorMessage(BaseModel):
    code: Optional[int] = Field(
        None,
        description='A machine friendly error code, used by the dev team to identify the error.',
    )
    message: Optional[str] = Field(
        None, description='A human friendly message explaining the error.'
    )


class FileCreator(BaseModel):
    link: Optional[str] = Field(
        None,
        description='Url for an existing file that will not be uploaded to Figshare',
        examples=['http://figshare.com/file.txt'],
    )
    md5: Optional[str] = Field(
        None,
        description='MD5 sum pre-computed on client side.',
        examples=['6c16e6e7d7587bd078e5117dda01d565'],
    )
    name: Optional[str] = Field(
        None,
        description='File name including the extension; can be omitted only for linked files.',
        examples=['test.py'],
    )
    size: Optional[int] = Field(
        None,
        description='File size in bytes; can be omitted only for linked files.',
        examples=[70],
    )


class FileId(BaseModel):
    file_id: Optional[int] = Field(None, description='File ID', examples=[123])


class FundingCreate(BaseModel):
    id: Optional[int] = Field(
        None, description='A funding ID as returned by the Funding Search endpoint'
    )
    title: Optional[str] = Field(
        None, description='The title of the new user created funding'
    )


class FundingInformation(BaseModel):
    funder_name: str = Field(..., description="Funder's name")
    grant_code: str = Field(..., description='The grant code')
    id: int = Field(..., description='Funding id', examples=[1])
    is_user_defined: bool = Field(
        ..., description='Return whether the grant has been introduced manually'
    )
    title: str = Field(
        ..., description='The funding name', examples=['Scholarly funding']
    )
    url: str = Field(
        ...,
        description='The grant url',
        examples=['https://app.dimensions.ai/details/grant/1'],
    )


class FundingSearch(BaseModel):
    search_for: Optional[str] = Field(None, description='Search term')


class Group(BaseModel):
    association_criteria: str = Field(
        ...,
        description='HR code associated with group, if code exists',
        examples=['IT'],
    )
    id: int = Field(..., description='Group id', examples=[1])
    name: str = Field(..., description='Group name', examples=['Materials'])
    parent_id: int = Field(..., description='Parent group if any', examples=[0])
    resource_id: str = Field(..., description='Group resource id', examples=[''])


class Type1(Enum):
    logged_in = 'logged_in'
    ip_range = 'ip_range'
    administrator = 'administrator'


class GroupEmbargoOptions(BaseModel):
    id: int = Field(..., description='Embargo option id', examples=[364])
    ip_name: str = Field(
        ...,
        description='IP range name; value appears if type is ip_range',
        examples=['Figshare IP range'],
    )
    type: Type1 = Field(
        ..., description='Embargo permission type', examples=['ip_range']
    )


class Institution(BaseModel):
    domain: str = Field(..., description='Institution domain', examples=[None])
    id: int = Field(..., description='Institution id', examples=[0])
    name: str = Field(..., description='Institution name', examples=['Institution'])


class InstitutionAccountsSearch(BaseModel):
    email: Optional[str] = Field(
        None, description='filter by email', examples=['alan@institution.com']
    )
    institution_user_id: Optional[str] = Field(
        None, description='filter by institution_user_id', examples=['alan']
    )
    is_active: Optional[conint(ge=0, le=1)] = Field(
        None, description='Filter by active status'
    )
    limit: Optional[conint(ge=1, le=1000)] = Field(
        None,
        description='Number of results included on a page. Used for pagination with query',
        examples=[10],
    )
    offset: Optional[conint(ge=0, le=5000)] = Field(
        None,
        description='Where to start the listing(the offset of the first result). Used for pagination with limit',
        examples=[0],
    )
    page: Optional[conint(ge=1, le=5000)] = Field(
        None,
        description='Page number. Used for pagination with page_size',
        examples=[1],
    )
    page_size: Optional[conint(ge=1, le=1000)] = Field(
        10,
        description='The number of results included on a page. Used for pagination with page',
        examples=[10],
    )
    search_for: Optional[str] = Field(
        None, description='Search term', examples=['figshare']
    )


class ItemType(BaseModel):
    icon: str = Field(
        ...,
        description='The string identifying the icon of the item type.',
        examples=['paper'],
    )
    id: conint(ge=1) = Field(..., description='The ID of the item type.')
    is_selectable: bool = Field(
        ..., description='The selectable status', examples=[True]
    )
    name: str = Field(
        ..., description='The name of the item type', examples=['journal contribution']
    )
    public_description: str = Field(
        ...,
        description='The description of the item type.',
        examples=['This is the description of an item type'],
    )
    string_id: str = Field(
        ...,
        description='The string identifier of the item type.',
        examples=['journal_contribution'],
    )
    url_name: str = Field(
        ...,
        description='The URL name of the item type.',
        examples=['journal_contribution'],
    )


class License(BaseModel):
    name: str = Field(..., description='License name', examples=['CC BY'])
    url: str = Field(
        ...,
        description='License url',
        examples=['http://creativecommons.org/licenses/by/4.0/'],
    )
    value: int = Field(..., description='License value', examples=[1])


class Location(BaseModel):
    location: str = Field(..., description='Url for item')


class LocationWarnings(BaseModel):
    entity_id: int = Field(
        ..., description='Figshare ID of the entity', examples=[33334444]
    )
    location: str = Field(..., description='Url for entity')
    warnings: List[str] = Field(
        ..., description='Issues encountered during the operation'
    )


class LocationWarningsUpdate(BaseModel):
    location: str = Field(..., description='Url for entity')
    warnings: List[str] = Field(
        ..., description='Issues encountered during the operation'
    )


class Order2(Enum):
    published_date = 'published_date'
    modified_date = 'modified_date'
    views = 'views'
    shares = 'shares'
    downloads = 'downloads'
    cites = 'cites'


class PrivateAuthorsSearch(BaseModel):
    group_id: Optional[int] = Field(
        None, description='Return only authors in this group or subgroups of the group'
    )
    institution_id: Optional[int] = Field(
        None,
        description='Return only authors associated to this institution',
        examples=[1],
    )
    is_active: Optional[bool] = Field(
        None, description='Return only active authors if True'
    )
    is_public: Optional[bool] = Field(
        None, description='Return only authors that have published items if True'
    )
    limit: Optional[conint(ge=1, le=1000)] = Field(
        None,
        description='Number of results included on a page. Used for pagination with query',
        examples=[10],
    )
    offset: Optional[conint(ge=0, le=5000)] = Field(
        None,
        description='Where to start the listing(the offset of the first result). Used for pagination with limit',
        examples=[0],
    )
    orcid: Optional[str] = Field(None, description='Orcid of author')
    order: Optional[Order2] = Field(
        'published_date',
        description='The field by which to order. Default varies by endpoint/resource.',
        examples=['published_date'],
    )
    order_direction: Optional[OrderDirection] = Field(
        'desc', description='Direction of ordering', examples=['desc']
    )
    page: Optional[conint(ge=1, le=5000)] = Field(
        None,
        description='Page number. Used for pagination with page_size',
        examples=[1],
    )
    page_size: Optional[conint(ge=1, le=1000)] = Field(
        10,
        description='The number of results included on a page. Used for pagination with page',
        examples=[10],
    )
    search_for: Optional[str] = Field(
        None, description='Search term', examples=['figshare']
    )


class PrivateLink(BaseModel):
    expires_date: str = Field(
        ..., description='Date when link will expire', examples=['2015-07-03T00:00:00']
    )
    html_location: str = Field(
        ...,
        description='HTML url for private link',
        examples=['https://figshare.com/s/d5ec7a85bcd6dbe9d9b2'],
    )
    id: str = Field(
        ...,
        description='Private link id',
        examples=[
            '0cfb0dbeac92df445df4aba45f63fdc85fa0b9a888b64e157ce3c93b576aa300fb3621ef3a219515dd482'
        ],
    )
    is_active: bool = Field(
        ..., description='True if private link is active', examples=[True]
    )


class PrivateLinkCreator(BaseModel):
    expires_date: Optional[str] = Field(
        None,
        description='Date when this private link should expire - optional. By default private links expire in 365 days.',
        examples=['2018-02-22 22:22:22'],
    )
    read_only: Optional[bool] = Field(
        None,
        description='Optional, default true. Set to false to give private link users editing rights for this collection.',
        examples=[True],
    )


class PrivateLinkResponse(BaseModel):
    html_location: str = Field(
        ...,
        description='HTML url for private link',
        examples=['https://figshare.com/s/d5ec7a85bcd6dbe9d9b2'],
    )
    location: str = Field(..., description='Url for private link')
    token: str = Field(
        ..., description='Token for private link', examples=['d5ec7a85bcd6dbe9d9b2']
    )


class Project(BaseModel):
    id: int = Field(..., description='Project id', examples=[1])
    published_date: str = Field(
        ...,
        description='Date when project was published',
        examples=['2017-05-16T14:55:08Z'],
    )
    title: str = Field(..., description='Project title', examples=['project'])
    url: str = Field(
        ...,
        description='Api endpoint',
        examples=['http://api.figshare.com/v2/account/projects/1'],
    )


class ProjectCollaborator(BaseModel):
    name: str = Field(..., description='Collaborator name', examples=['name'])
    role_name: str = Field(..., description='Collaborator role', examples=['Owner'])
    status: str = Field(
        ..., description='Status of collaborator invitation', examples=['invited']
    )
    user_id: int = Field(..., description='Collaborator id', examples=[1])


class RoleName(Enum):
    viewer = 'viewer'
    collaborator = 'collaborator'


class ProjectCollaboratorInvite(BaseModel):
    comment: Optional[str] = Field(
        None,
        description='Text sent when inviting the user to the project',
        examples=['hey'],
    )
    email: Optional[str] = Field(
        None, description='Collaborator email', examples=['user@domain.com']
    )
    role_name: RoleName = Field(
        ...,
        description='Role of the the collaborator inside the project',
        examples=['viewer'],
    )
    user_id: Optional[int] = Field(
        None, description='User id of the collaborator', examples=[100008]
    )


class ProjectComplete(Project):
    collaborators: List[Collaborator] = Field(
        ..., description='List of project collaborators'
    )
    description: str = Field(
        ..., description='Project description', examples=['description']
    )
    figshare_url: str = Field(
        ...,
        description='Project public url',
        examples=['https://figshare.com/projects/project/1'],
    )
    funding: str = Field(..., description='Project funding', examples=[''])
    funding_list: List[FundingInformation] = Field(
        ..., description='Full Project funding information'
    )
    url: str = Field(
        ...,
        description='Api endpoint',
        examples=['http://api.figshare.com/v2/account/projects/1'],
    )
    published_date: str = Field(
        ...,
        description='Date when project was published',
        examples=['2017-05-16T14:55:08Z'],
    )
    id: int = Field(..., description='Project id', examples=[1])
    title: str = Field(..., description='Project title', examples=['project'])


class ProjectCreate(BaseModel):
    custom_fields: Optional[Dict[str, Any]] = Field(
        None,
        description='List of key, values pairs to be associated with the project',
        examples=[{'defined_key': 'value for it'}],
    )
    custom_fields_list: Optional[List[CustomArticleFieldAdd]] = Field(
        None,
        description='List of custom fields values, supersedes custom_fields parameter',
    )
    description: Optional[constr(max_length=10000)] = Field(
        None, description='Project description', examples=['project description']
    )
    funding: Optional[str] = Field(
        None,
        description='Grant number or organization(s) that funded this project. Up to 2000 characters permitted.',
        examples=[''],
    )
    funding_list: Optional[List[FundingCreate]] = Field(
        None, description='Funding creation / update items'
    )
    group_id: Optional[int] = Field(
        None, description='Only if project type is group.', examples=[0]
    )
    title: constr(min_length=3, max_length=1000) = Field(
        ...,
        description='The title for this project - mandatory. 3 - 1000 characters.',
        examples=['project title'],
    )


class ProjectNote(BaseModel):
    abstract: str = Field(
        ..., description='Note Abstract - short/truncated content', examples=['text']
    )
    created_date: str = Field(
        ..., description='Date when note was created', examples=['2017-05-16T16:49:11Z']
    )
    id: int = Field(..., description='Project note id', examples=[1])
    modified_date: str = Field(
        ...,
        description='Date when note was last modified',
        examples=['2017-05-16T16:49:11Z'],
    )
    user_id: int = Field(..., description='User who wrote the note', examples=[100008])
    user_name: str = Field(
        ..., description='Username of the one who wrote the note', examples=['user']
    )


class ProjectNoteCreate(BaseModel):
    text: constr(min_length=3) = Field(
        ..., description='Text of the note', examples=['note to remember']
    )


class ProjectNotePrivate(ProjectNote):
    text: str = Field(..., description='Full text of note', examples=['text'])
    id: int = Field(..., description='Project note id', examples=[1])
    user_id: int = Field(..., description='User who wrote the note', examples=[100008])
    abstract: str = Field(
        ..., description='Note Abstract - short/truncated content', examples=['text']
    )
    user_name: str = Field(
        ..., description='Username of the one who wrote the note', examples=['user']
    )
    created_date: str = Field(
        ..., description='Date when note was created', examples=['2017-05-16T16:49:11Z']
    )
    modified_date: str = Field(
        ...,
        description='Date when note was last modified',
        examples=['2017-05-16T16:49:11Z'],
    )


class Role(Enum):
    Owner = 'Owner'
    Collaborator = 'Collaborator'
    Viewer = 'Viewer'


class Storage(Enum):
    individual = 'individual'
    group = 'group'


class ProjectPrivate(Project):
    role: Role = Field(..., description='Role inside this project', examples=['Owner'])
    storage: Storage = Field(
        ..., description='Project storage type', examples=['individual']
    )
    url: str = Field(
        ...,
        description='Api endpoint',
        examples=['http://api.figshare.com/v2/account/projects/1'],
    )
    published_date: str = Field(
        ...,
        description='Date when project was published',
        examples=['2017-05-16T14:55:08Z'],
    )
    id: int = Field(..., description='Project id', examples=[1])
    title: str = Field(..., description='Project title', examples=['project'])


class ProjectUpdate(BaseModel):
    custom_fields: Optional[Dict[str, Any]] = Field(
        None,
        description='List of key, values pairs to be associated with the project',
        examples=[{'defined_key': 'value for it'}],
    )
    custom_fields_list: Optional[List[CustomArticleFieldAdd]] = Field(
        None,
        description='List of custom fields values, supersedes custom_fields parameter',
    )
    description: Optional[constr(max_length=10000)] = Field(
        None, description='Project description', examples=['project description']
    )
    funding: Optional[str] = Field(
        None,
        description='Grant number or organization(s) that funded this project. Up to 2000 characters permitted.',
        examples=[''],
    )
    funding_list: Optional[List[FundingCreate]] = Field(
        None, description='Funding creation / update items'
    )
    title: Optional[constr(min_length=3, max_length=1000)] = Field(
        None,
        description='The title for this project - mandatory. 3 - 1000 characters.',
        examples=['project title'],
    )


class Order3(Enum):
    published_date = 'published_date'
    modified_date = 'modified_date'
    views = 'views'


class ProjectsSearch(CommonSearch):
    order: Optional[Order3] = Field(
        'published_date',
        description='The field by which to order.',
        examples=['published_date'],
    )


class PublicFile(BaseModel):
    computed_md5: str = Field(
        ...,
        description='File computed md5',
        examples=['043a51806d646e88cafbf19e7b82846f'],
    )
    download_url: str = Field(
        ...,
        description='Url for file download',
        examples=['https://ndownloader.figshare.com/files/3000002'],
    )
    id: int = Field(..., description='File id', examples=[3000002])
    is_link_only: bool = Field(
        ..., description='True if file is hosted somewhere else', examples=[False]
    )
    name: str = Field(..., description='File name', examples=['test.xls'])
    size: int = Field(..., description='File size', examples=[14848])
    supplied_md5: str = Field(
        ...,
        description='File supplied md5',
        examples=['043a51806d646e88cafbf19e7b82846f'],
    )


class Resource(BaseModel):
    doi: Optional[str] = Field('', description='DOI of resource item')
    id: Optional[constr(max_length=255)] = Field(
        '', description='ID of resource item', examples=['aaaa23512']
    )
    link: Optional[constr(max_length=255)] = Field(
        '', description='Link of resource item', examples=['https://docs.figshare.com']
    )
    status: Optional[constr(max_length=100)] = Field(
        '', description='Status of resource item', examples=['frozen']
    )
    title: Optional[constr(max_length=1000)] = Field(
        '', description='Title of resource item', examples=['Test title']
    )
    version: Optional[int] = Field(
        0, description='Version of resource item', examples=[1]
    )


class ResponseMessage(BaseModel):
    message: str = Field(
        ...,
        description='Response message text',
        examples=['Project 1 has been published'],
    )


class Role1(BaseModel):
    category: str = Field(..., description='Role category', examples=['group'])
    description: str = Field(..., description='Role description')
    id: int = Field(..., description='Role id', examples=[1])
    name: str = Field(..., description='Role name', examples=['Curator'])


class ShortAccount(BaseModel):
    active: int = Field(..., description='Account activity status', examples=[0])
    email: str = Field(..., description='User email', examples=['user@domain.com'])
    first_name: str = Field(..., description='First Name', examples=['Doe'])
    id: int = Field(..., description='Account id', examples=[1495682])
    institution_id: int = Field(..., description='Account institution', examples=[1])
    institution_user_id: str = Field(
        ..., description='Account institution user id', examples=[1]
    )
    last_name: str = Field(..., description='Last Name', examples=['John'])
    orcid_id: str = Field(
        ...,
        description='ORCID iD associated to account',
        examples=['0000-0001-2345-6789'],
    )
    quota: int = Field(
        ...,
        description='Total storage available to account, in bytes',
        examples=[1074000000],
    )
    used_quota: int = Field(
        ..., description='Storage used by the account, in bytes', examples=[1074000000]
    )
    user_id: int = Field(
        ...,
        description='User id associated with account, useful for example for adding the account as an author to an item',
        examples=[1000001],
    )


class FieldType(Enum):
    text = 'text'
    textarea = 'textarea'
    dropdown = 'dropdown'
    url = 'url'
    email = 'email'
    date = 'date'
    dropdown_large_list = 'dropdown_large_list'


class ShortCustomField(BaseModel):
    field_type: FieldType = Field(
        ..., description='Custom field type', examples=['textarea']
    )
    id: int = Field(..., description='Custom field id', examples=[365])
    name: str = Field(
        ..., description='Custom field name', examples=['my custom field']
    )


class TimelineUpdate(BaseModel):
    firstOnline: Optional[str] = Field(
        None, description='Online posted date', examples=['2015-12-31']
    )
    publisherAcceptance: Optional[str] = Field(
        None,
        description='Date when the item was accepted for publication',
        examples=['2015-12-31'],
    )
    publisherPublication: Optional[str] = Field(
        None, description='Publish date', examples=['2015-12-31']
    )


class Status2(Enum):
    PENDING = 'PENDING'
    COMPLETE = 'COMPLETE'


class UploadFilePart(BaseModel):
    endOffset: Optional[int] = Field(
        None,
        description='Indexes on byte range. zero-based and inclusive',
        examples=[69],
    )
    locked: Optional[bool] = Field(
        None,
        description='When a part is being uploaded it is being locked, by setting the locked flag to true. No changes/uploads can happen on this part from other requests.',
    )
    partNo: Optional[int] = Field(None, description='File part id', examples=[1])
    startOffset: Optional[int] = Field(
        None,
        description='Indexes on byte range. zero-based and inclusive',
        examples=[0],
    )
    status: Optional[Status2] = Field(None, description='part status')


class Status3(Enum):
    PENDING = 'PENDING'
    COMPLETED = 'COMPLETED'
    ABORTED = 'ABORTED'


class UploadInfo(BaseModel):
    md5: Optional[str] = Field(
        None,
        description='md5 provided on upload initialization',
        examples=['3a7f451c068f4e13260034c611378140'],
    )
    name: Optional[str] = Field(
        None, description='name of file on upload server', examples=['3000017/test.py']
    )
    parts: Optional[List[UploadFilePart]] = Field(None, description='Uploads parts')
    size: Optional[int] = Field(
        None, description='size of file in bytes', examples=[70]
    )
    status: Optional[Status3] = Field(None, description='Upload status')
    token: Optional[str] = Field(
        None,
        description='token received after initializing a file upload',
        examples=['693a2802-cd61-430d-b89f-507f0f6d8fd3'],
    )


class User(BaseModel):
    first_name: str = Field(..., description='First Name', examples=['Doe'])
    id: int = Field(..., description='User id', examples=[1495682])
    is_active: bool = Field(..., description='Account activity status', examples=[True])
    is_public: bool = Field(..., description='Account public status', examples=[True])
    job_title: str = Field(..., description='User Job title', examples=['programmer'])
    last_name: str = Field(..., description='Last Name', examples=['John'])
    name: str = Field(..., description='Full Name', examples=['John Doe'])
    orcid_id: str = Field(
        ...,
        description='Orcid associated to this User',
        examples=['1234-5678-9123-1234'],
    )
    url_name: str = Field(
        ..., description='Name that appears in website url', examples=['John_Doe']
    )


class AccountArticlesExportGetResponse(RootModel[List[AccountReport]]):
    root: List[AccountReport]


class AccountArticlesArticleIdAuthorsGetResponse(RootModel[List[Author]]):
    root: List[Author]


class AccountArticlesArticleIdCategoriesGetResponse(RootModel[List[Category]]):
    root: List[Category]


class AccountArticlesArticleIdPrivateLinksGetResponse(RootModel[List[PrivateLink]]):
    root: List[PrivateLink]


class AccountAuthorsSearchPostResponse(RootModel[List[Author]]):
    root: List[Author]


class AccountCategoriesGetResponse(RootModel[List[Category]]):
    root: List[Category]


class Order4(Enum):
    published_date = 'published_date'
    modified_date = 'modified_date'
    views = 'views'
    shares = 'shares'
    cites = 'cites'


class AccountCollectionsCollectionIdAuthorsGetResponse(RootModel[List[Author]]):
    root: List[Author]


class AccountCollectionsCollectionIdCategoriesGetResponse(RootModel[List[Category]]):
    root: List[Category]


class AccountCollectionsCollectionIdPrivateLinksGetResponse(
    RootModel[List[PrivateLink]]
):
    root: List[PrivateLink]


class AccountFundingSearchPostResponse(RootModel[List[FundingInformation]]):
    root: List[FundingInformation]


class AccountInstitutionAccountsGetResponse(RootModel[List[ShortAccount]]):
    root: List[ShortAccount]


class AccountInstitutionAccountsSearchPostResponse(RootModel[List[ShortAccount]]):
    root: List[ShortAccount]


class Order6(Enum):
    published_date = 'published_date'
    modified_date = 'modified_date'
    views = 'views'
    shares = 'shares'
    downloads = 'downloads'
    cites = 'cites'


class AccountInstitutionCustomFieldsGetResponse(RootModel[List[ShortCustomField]]):
    root: List[ShortCustomField]


class AccountInstitutionCustomFieldsCustomFieldIdItemsUploadPostRequest(BaseModel):
    external_file: Optional[bytes] = Field(None, description='CSV file to be uploaded')


class AccountInstitutionCustomFieldsCustomFieldIdItemsUploadPostResponse(BaseModel):
    pass


class AccountInstitutionEmbargoOptionsGetResponse(RootModel[List[GroupEmbargoOptions]]):
    root: List[GroupEmbargoOptions]


class AccountInstitutionGroupsGetResponse(RootModel[List[Group]]):
    root: List[Group]


class AccountInstitutionGroupsGroupIdEmbargoOptionsGetResponse(
    RootModel[List[GroupEmbargoOptions]]
):
    root: List[GroupEmbargoOptions]


class Status4(Enum):
    pending = 'pending'
    approved = 'approved'
    rejected = 'rejected'
    closed = 'closed'


class AccountInstitutionRolesGetResponse(RootModel[List[Role1]]):
    root: List[Role1]


class AccountLicensesGetResponse(RootModel[List[License]]):
    root: List[License]


class Order8(Enum):
    published_date = 'published_date'
    modified_date = 'modified_date'
    views = 'views'


class Storage1(Enum):
    group = 'group'
    individual = 'individual'


class AccountProjectsGetResponse(RootModel[List[ProjectPrivate]]):
    root: List[ProjectPrivate]


class AccountProjectsSearchPostResponse(RootModel[List[ProjectPrivate]]):
    root: List[ProjectPrivate]


class AccountProjectsProjectIdCollaboratorsGetResponse(
    RootModel[List[ProjectCollaborator]]
):
    root: List[ProjectCollaborator]


class AccountProjectsProjectIdNotesGetResponse(RootModel[List[ProjectNote]]):
    root: List[ProjectNote]


class Order10(Enum):
    published_date = 'published_date'
    modified_date = 'modified_date'
    views = 'views'
    shares = 'shares'
    downloads = 'downloads'
    cites = 'cites'


class ArticlesArticleIdFilesGetResponse(RootModel[List[PublicFile]]):
    root: List[PublicFile]


class ArticlesArticleIdVersionsGetResponse(RootModel[List[ArticleVersions]]):
    root: List[ArticleVersions]


class CategoriesGetResponse(RootModel[List[Category]]):
    root: List[Category]


class Order12(Enum):
    published_date = 'published_date'
    modified_date = 'modified_date'
    views = 'views'
    shares = 'shares'
    cites = 'cites'


class CollectionsCollectionIdVersionsGetResponse(RootModel[List[CollectionVersions]]):
    root: List[CollectionVersions]


class InstitutionHrfeedUploadPostRequest(BaseModel):
    hrfeed: Optional[bytes] = Field(
        None, description='You can find an example in the Hr Feed section'
    )


class ItemTypesGetResponse(RootModel[List[ItemType]]):
    root: List[ItemType]


class LicensesGetResponse(RootModel[List[License]]):
    root: List[License]


class Order14(Enum):
    published_date = 'published_date'
    modified_date = 'modified_date'
    views = 'views'


class ProjectsGetResponse(RootModel[List[Project]]):
    root: List[Project]


class ProjectsSearchPostResponse(RootModel[List[Project]]):
    root: List[Project]


class ArticleCreate(BaseModel):
    authors: Optional[List[Dict[str, Any]]] = Field(
        [],
        description='List of authors to be associated with the article. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.',
        examples=[[{'name': 'John Doe'}, {'id': 1000008}]],
    )
    categories: Optional[List[int]] = Field(
        [],
        description='List of category ids to be associated with the article(e.g [1, 23, 33, 66])',
        examples=[[1, 10, 11]],
    )
    categories_by_source_id: Optional[List[str]] = Field(
        [],
        description='List of category source ids to be associated with the article, supersedes the categories property',
        examples=[['300204', '400207']],
    )
    custom_fields: Optional[Dict[str, Any]] = Field(
        None,
        description='List of key, values pairs to be associated with the article',
        examples=[{'defined_key': 'value for it'}],
    )
    custom_fields_list: Optional[List[CustomArticleFieldAdd]] = Field(
        None,
        description='List of custom fields values, supersedes custom_fields parameter',
    )
    defined_type: Optional[str] = Field(
        None,
        description='<b>One of:</b> <code>figure</code> <code>online resource</code> <code>preprint</code> <code>book</code> <code>conference contribution</code> <code>media</code> <code>dataset</code> <code>poster</code> <code>journal contribution</code> <code>presentation</code> <code>thesis</code> <code>software</code>',
        examples=['media'],
    )
    description: Optional[constr(max_length=10000)] = Field(
        '',
        description='The article description. In a publisher case, usually this is the remote article description',
        examples=['Test description of article'],
    )
    doi: Optional[str] = Field(
        '',
        description='Not applicable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system.',
    )
    funding: Optional[str] = Field('', description='Grant number or funding authority')
    funding_list: Optional[List[FundingCreate]] = Field(
        None, description='Funding creation / update items'
    )
    group_id: Optional[int] = Field(
        None,
        description='Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups',
    )
    handle: Optional[str] = Field(
        '',
        description='Not applicable for regular users. In an institutional case, make sure your group supports setting Handles. This setting is applied by figshare via opening a ticket through our support/helpdesk system.',
    )
    is_metadata_record: Optional[bool] = Field(
        None, description='True if article has no files', examples=[True]
    )
    keywords: Optional[List[str]] = Field(
        [],
        description='List of tags to be associated with the article. Tags can be used instead',
        examples=[['tag1', 'tag2']],
    )
    license: Optional[int] = Field(
        0, description='License id for this article.', examples=[1]
    )
    metadata_reason: Optional[str] = Field(
        None, description='Article metadata reason', examples=['hosted somewhere else']
    )
    references: Optional[List[str]] = Field(
        [],
        description='List of links to be associated with the article (e.g ["http://link1", "http://link2", "http://link3"])',
        examples=[['http://figshare.com', 'http://api.figshare.com']],
    )
    resource_doi: Optional[str] = Field(
        '',
        description='Not applicable to regular users. In a publisher case, this is the publisher article DOI.',
    )
    resource_title: Optional[str] = Field(
        '',
        description='Not applicable to regular users. In a publisher case, this is the publisher article title.',
    )
    tags: Optional[List[str]] = Field(
        [],
        description='List of tags to be associated with the article. Keywords can be used instead',
        examples=[['tag1', 'tag2']],
    )
    timeline: Optional[TimelineUpdate] = None
    title: constr(min_length=3, max_length=1000) = Field(
        ..., description='Title of article', examples=['Test article title']
    )


class ArticleProjectCreate(BaseModel):
    authors: Optional[List[Dict[str, Any]]] = Field(
        [],
        description='List of authors to be associated with the article. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.',
        examples=[[{'name': 'John Doe'}, {'id': 1000008}]],
    )
    categories: Optional[List[int]] = Field(
        [],
        description='List of category ids to be associated with the article(e.g [1, 23, 33, 66])',
        examples=[[1, 10, 11]],
    )
    categories_by_source_id: Optional[List[str]] = Field(
        [],
        description='List of category source ids to be associated with the article, supersedes the categories property',
        examples=[['300204', '400207']],
    )
    custom_fields: Optional[Dict[str, Any]] = Field(
        None,
        description='List of key, values pairs to be associated with the article',
        examples=[{'defined_key': 'value for it'}],
    )
    custom_fields_list: Optional[List[CustomArticleFieldAdd]] = Field(
        None,
        description='List of custom fields values, supersedes custom_fields parameter',
    )
    defined_type: Optional[str] = Field(
        None,
        description='<b>One of:</b> <code>figure</code> <code>online resource</code> <code>preprint</code> <code>book</code> <code>conference contribution</code> <code>media</code> <code>dataset</code> <code>poster</code> <code>journal contribution</code> <code>presentation</code> <code>thesis</code> <code>software</code>',
        examples=['media'],
    )
    description: Optional[constr(max_length=10000)] = Field(
        '',
        description='The article description. In a publisher case, usually this is the remote article description',
        examples=['Test description of article'],
    )
    doi: Optional[str] = Field(
        '',
        description='Not applicable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system.',
    )
    funding: Optional[str] = Field('', description='Grant number or funding authority')
    funding_list: Optional[List[FundingCreate]] = Field(
        None, description='Funding creation / update items'
    )
    handle: Optional[str] = Field(
        '',
        description='Not applicable for regular users. In an institutional case, make sure your group supports setting Handles. This setting is applied by figshare via opening a ticket through our support/helpdesk system.',
    )
    keywords: Optional[List[str]] = Field(
        [],
        description='List of tags to be associated with the article. Tags can be used instead',
        examples=[['tag1', 'tag2']],
    )
    license: Optional[int] = Field(
        0, description='License id for this article.', examples=[1]
    )
    references: Optional[List[str]] = Field(
        [],
        description='List of links to be associated with the article (e.g ["http://link1", "http://link2", "http://link3"])',
        examples=[['http://figshare.com', 'http://api.figshare.com']],
    )
    resource_doi: Optional[str] = Field(
        '',
        description='Not applicable to regular users. In a publisher case, this is the publisher article DOI.',
    )
    resource_title: Optional[str] = Field(
        '',
        description='Not applicable to regular users. In a publisher case, this is the publisher article title.',
    )
    tags: Optional[List[str]] = Field(
        [],
        description='List of tags to be associated with the article. Keywords can be used instead',
        examples=[['tag1', 'tag2']],
    )
    timeline: Optional[TimelineUpdate] = None
    title: constr(min_length=3, max_length=1000) = Field(
        ..., description='Title of article', examples=['Test article title']
    )


class ArticleSearch(CommonSearch):
    doi: Optional[str] = Field(
        None,
        description='Only return articles with this doi',
        examples=['10.6084/m9.figshare.1407024'],
    )
    handle: Optional[str] = Field(
        None,
        description='Only return articles with this handle',
        examples=['111084/m9.figshare.14074'],
    )
    item_type: Optional[int] = Field(
        None,
        description='Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model',
        examples=[1],
    )
    order: Optional[Order] = Field(
        'created_date',
        description='The field by which to order',
        examples=['published_date'],
    )
    project_id: Optional[int] = Field(
        None, description='Only return articles in this project', examples=[1]
    )
    resource_doi: Optional[str] = Field(
        None,
        description='Only return articles with this resource_doi',
        examples=['10.6084/m9.figshare.1407024'],
    )


class ArticleUpdate(BaseModel):
    authors: Optional[List[Dict[str, Any]]] = Field(
        [],
        description='List of authors to be associated with the article. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.',
        examples=[[{'name': 'John Doe'}, {'id': 1000008}]],
    )
    categories: Optional[List[int]] = Field(
        [],
        description='List of category ids to be associated with the article(e.g [1, 23, 33, 66])',
        examples=[[1, 10, 11]],
    )
    categories_by_source_id: Optional[List[str]] = Field(
        [],
        description='List of category source ids to be associated with the article, supersedes the categories property',
        examples=[['300204', '400207']],
    )
    custom_fields: Optional[Dict[str, Any]] = Field(
        None,
        description='List of key, values pairs to be associated with the article',
        examples=[{'defined_key': 'value for it'}],
    )
    custom_fields_list: Optional[List[CustomArticleFieldAdd]] = Field(
        None,
        description='List of custom fields values, supersedes custom_fields parameter',
    )
    defined_type: Optional[str] = Field(
        None,
        description='<b>One of:</b> <code>figure</code> <code>online resource</code> <code>preprint</code> <code>book</code> <code>conference contribution</code> <code>media</code> <code>dataset</code> <code>poster</code> <code>journal contribution</code> <code>presentation</code> <code>thesis</code> <code>software</code>',
        examples=['media'],
    )
    description: Optional[constr(max_length=10000)] = Field(
        '',
        description='The article description. In a publisher case, usually this is the remote article description',
        examples=['Test description of article'],
    )
    doi: Optional[str] = Field(
        '',
        description='Not applicable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system.',
    )
    funding: Optional[str] = Field('', description='Grant number or funding authority')
    funding_list: Optional[List[FundingCreate]] = Field(
        None, description='Funding creation / update items'
    )
    group_id: Optional[int] = Field(
        None,
        description='Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups',
    )
    handle: Optional[str] = Field(
        '',
        description='Not applicable for regular users. In an institutional case, make sure your group supports setting Handles. This setting is applied by figshare via opening a ticket through our support/helpdesk system.',
    )
    is_metadata_record: Optional[bool] = Field(
        None, description='True if article has no files', examples=[True]
    )
    keywords: Optional[List[str]] = Field(
        [],
        description='List of tags to be associated with the article. Tags can be used instead',
        examples=[['tag1', 'tag2']],
    )
    license: Optional[int] = Field(
        0, description='License id for this article.', examples=[1]
    )
    metadata_reason: Optional[str] = Field(
        None, description='Article metadata reason', examples=['hosted somewhere else']
    )
    references: Optional[List[str]] = Field(
        [],
        description='List of links to be associated with the article (e.g ["http://link1", "http://link2", "http://link3"])',
        examples=[['http://figshare.com', 'http://api.figshare.com']],
    )
    resource_doi: Optional[str] = Field(
        '',
        description='Not applicable to regular users. In a publisher case, this is the publisher article DOI.',
    )
    resource_title: Optional[str] = Field(
        '',
        description='Not applicable to regular users. In a publisher case, this is the publisher article title.',
    )
    tags: Optional[List[str]] = Field(
        [],
        description='List of tags to be associated with the article. Keywords can be used instead',
        examples=[['tag1', 'tag2']],
    )
    timeline: Optional[TimelineUpdate] = None
    title: Optional[constr(min_length=3, max_length=1000)] = Field(
        None, description='Title of article', examples=['Test article title']
    )


class CollectionCreate(BaseModel):
    articles: Optional[List[int]] = Field(
        None,
        description='List of articles to be associated with the collection',
        examples=[[2000001, 2000005]],
    )
    authors: Optional[List[Dict[str, Any]]] = Field(
        [],
        description='List of authors to be associated with the collection. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.',
        examples=[[{'name': 'John Doe'}, {'id': 20005}]],
    )
    categories: Optional[List[int]] = Field(
        [],
        description='List of category ids to be associated with the collection(e.g [1, 23, 33, 66])',
        examples=[[1, 10, 11]],
    )
    categories_by_source_id: Optional[List[str]] = Field(
        [],
        description='List of category source ids to be associated with the collection, supersedes the categories property',
        examples=[['300204', '400207']],
    )
    custom_fields: Optional[Dict[str, Any]] = Field(
        None,
        description='List of key, values pairs to be associated with the collection',
        examples=[{'defined_key': 'value for it'}],
    )
    custom_fields_list: Optional[List[CustomArticleFieldAdd]] = Field(
        None,
        description='List of custom fields values, supersedes custom_fields parameter',
    )
    description: Optional[constr(max_length=10000)] = Field(
        '',
        description='The collection description. In a publisher case, usually this is the remote collection description',
        examples=['Test description of article'],
    )
    doi: Optional[str] = Field(
        '',
        description='Not applicable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system.',
    )
    funding: Optional[str] = Field('', description='Grant number or funding authority')
    funding_list: Optional[List[FundingCreate]] = Field(
        None, description='Funding creation / update items'
    )
    group_id: Optional[int] = Field(
        None,
        description='Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups',
    )
    handle: Optional[str] = Field(
        '',
        description='Not applicable for regular users. In an institutional case, make sure your group supports setting Handles. This setting is applied by figshare via opening a ticket through our support/helpdesk system.',
    )
    keywords: Optional[List[str]] = Field(
        [],
        description='List of tags to be associated with the collection. Tags can be used instead',
        examples=[['tag1', 'tag2']],
    )
    references: Optional[List[str]] = Field(
        [],
        description='List of links to be associated with the collection (e.g ["http://link1", "http://link2", "http://link3"])',
        examples=[['http://figshare.com', 'http://api.figshare.com']],
    )
    resource_doi: Optional[str] = Field(
        '',
        description='Not applicable to regular users. In a publisher case, this is the publisher article DOI.',
    )
    resource_id: Optional[str] = Field(
        None,
        description='Not applicable to regular users. In a publisher case, this is the publisher article id',
    )
    resource_link: Optional[str] = Field(
        None,
        description='Not applicable to regular users. In a publisher case, this is the publisher article link',
    )
    resource_title: Optional[str] = Field(
        '',
        description='Not applicable to regular users. In a publisher case, this is the publisher article title.',
    )
    resource_version: Optional[int] = Field(
        None,
        description='Not applicable to regular users. In a publisher case, this is the publisher article version',
    )
    tags: Optional[List[str]] = Field(
        [],
        description='List of tags to be associated with the collection. Keywords can be used instead',
        examples=[['tag1', 'tag2']],
    )
    timeline: Optional[TimelineUpdate] = None
    title: constr(min_length=3, max_length=1000) = Field(
        ..., description='Title of collection', examples=['Test collection title']
    )


class CollectionSearch(CommonSearch):
    doi: Optional[str] = Field(
        None,
        description='Only return collections with this doi',
        examples=['10.6084/m9.figshare.1407024'],
    )
    handle: Optional[str] = Field(
        None,
        description='Only return collections with this handle',
        examples=['10084/figshare.1407024'],
    )
    order: Optional[Order1] = Field(
        'created_date',
        description='The field by which to order.',
        examples=['published_date'],
    )
    resource_doi: Optional[str] = Field(
        None,
        description='Only return collections with this resource_doi',
        examples=['10.6084/m9.figshare.1407024'],
    )


class CollectionUpdate(BaseModel):
    articles: Optional[List[int]] = Field(
        None,
        description='List of articles to be associated with the collection',
        examples=[[2000001, 2000005]],
    )
    authors: Optional[List[Dict[str, Any]]] = Field(
        [],
        description='List of authors to be associated with the collection. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.',
        examples=[[{'name': 'John Doe'}, {'id': 20005}]],
    )
    categories: Optional[List[int]] = Field(
        [],
        description='List of category ids to be associated with the collection (e.g [1, 23, 33, 66])',
        examples=[[1, 10, 11]],
    )
    categories_by_source_id: Optional[List[str]] = Field(
        [],
        description='List of category source ids to be associated with the article, supersedes the categories property',
        examples=[['300204', '400207']],
    )
    custom_fields: Optional[Dict[str, Any]] = Field(
        None,
        description='List of key, values pairs to be associated with the collection',
        examples=[{'defined_key': 'value for it'}],
    )
    custom_fields_list: Optional[List[CustomArticleFieldAdd]] = Field(
        None,
        description='List of custom fields values, supersedes custom_fields parameter',
    )
    description: Optional[constr(max_length=10000)] = Field(
        '',
        description='The collection description. In a publisher case, usually this is the remote collection description',
        examples=['Test description of collection'],
    )
    doi: Optional[str] = Field(
        '',
        description='Not applicable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system.',
    )
    funding: Optional[str] = Field('', description='Grant number or funding authority')
    funding_list: Optional[List[FundingCreate]] = Field(
        None, description='Funding creation / update items'
    )
    group_id: Optional[int] = Field(
        None,
        description='Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups',
    )
    handle: Optional[str] = Field(
        '',
        description='Not applicable for regular users. In an institutional case, make sure your group supports setting Handles. This setting is applied by figshare via opening a ticket through our support/helpdesk system.',
    )
    keywords: Optional[List[str]] = Field(
        [],
        description='List of tags to be associated with the collection. Tags can be used instead',
        examples=[['tag1', 'tag2']],
    )
    references: Optional[List[str]] = Field(
        [],
        description='List of links to be associated with the collection (e.g ["http://link1", "http://link2", "http://link3"])',
        examples=[['http://figshare.com', 'http://api.figshare.com']],
    )
    resource_doi: Optional[str] = Field(
        '',
        description='Not applicable to regular users. In a publisher case, this is the publisher article DOI.',
    )
    resource_id: Optional[str] = Field(
        None,
        description='Not applicable to regular users. In a publisher case, this is the publisher article id',
    )
    resource_link: Optional[str] = Field(
        None,
        description='Not applicable to regular users. In a publisher case, this is the publisher article link',
    )
    resource_title: Optional[str] = Field(
        '',
        description='Not applicable to regular users. In a publisher case, this is the publisher article title.',
    )
    resource_version: Optional[int] = Field(
        None,
        description='Not applicable to regular users. In a publisher case, this is the publisher article version',
    )
    tags: Optional[List[str]] = Field(
        [],
        description='List of tags to be associated with the collection. Keywords can be used instead',
        examples=[['tag1', 'tag2']],
    )
    timeline: Optional[TimelineUpdate] = None
    title: Optional[constr(min_length=3, max_length=1000)] = Field(
        None, description='Title of collection', examples=['Test collection title']
    )


class PrivateArticleSearch(ArticleSearch):
    resource_id: Optional[str] = Field(
        None,
        description='only return collections with this resource_id',
        examples=['1407024'],
    )


class PrivateCollectionSearch(CollectionSearch):
    resource_id: Optional[str] = Field(
        None,
        description='only return collections with this resource_id',
        examples=['1407024'],
    )


class PrivateFile(PublicFile):
    is_attached_to_public_version: bool = Field(
        ...,
        description='True if the file is attached to a public item version',
        examples=[True],
    )
    preview_state: str = Field(
        ..., description='File preview state', examples=['preview not available']
    )
    status: str = Field(..., description='Status for file upload', examples=['created'])
    upload_token: str = Field(
        ...,
        description='Token for file upload',
        examples=['9dfc5fe3-d617-4d93-ac11-8afe7e984a4b'],
    )
    upload_url: str = Field(
        ...,
        description='Upload url for file',
        examples=['https://uploads.figshare.com'],
    )
    viewer_type: str = Field(..., description='File viewer type')
    id: int = Field(..., description='File id', examples=[3000002])
    name: str = Field(..., description='File name', examples=['test.xls'])
    size: int = Field(..., description='File size', examples=[14848])
    is_link_only: bool = Field(
        ..., description='True if file is hosted somewhere else', examples=[False]
    )
    download_url: str = Field(
        ...,
        description='Url for file download',
        examples=['https://ndownloader.figshare.com/files/3000002'],
    )
    supplied_md5: str = Field(
        ...,
        description='File supplied md5',
        examples=['043a51806d646e88cafbf19e7b82846f'],
    )
    computed_md5: str = Field(
        ...,
        description='File computed md5',
        examples=['043a51806d646e88cafbf19e7b82846f'],
    )


class ProjectCompletePrivate(ProjectPrivate):
    account_id: int = Field(
        ..., description='ID of the account owning the project', examples=[1000001]
    )
    collaborators: List[Collaborator] = Field(
        ..., description='List of project collaborators'
    )
    created_date: str = Field(
        ...,
        description='Date when project was created',
        examples=['2017-05-16T14:52:54Z'],
    )
    custom_fields: List[CustomArticleField] = Field(
        ..., description='Collection custom fields'
    )
    description: str = Field(
        ..., description='Project description', examples=['description']
    )
    figshare_url: str = Field(
        ...,
        description='Project public url',
        examples=['https://figshare.com/projects/project/1'],
    )
    funding: str = Field(..., description='Project funding', examples=['none'])
    funding_list: List[FundingInformation] = Field(
        ..., description='Full Project funding information'
    )
    group_id: int = Field(..., description='Group of project if any', examples=[0])
    modified_date: str = Field(
        ...,
        description='Date when project was last modified',
        examples=['2017-05-16T14:52:54Z'],
    )
    quota: int = Field(..., description='Project quota', examples=[0])
    used_quota: int = Field(..., description='Project used quota', examples=[0])
    used_quota_private: int = Field(
        ..., description='Project private quota used', examples=[0]
    )
    used_quota_public: int = Field(
        ..., description='Project public quota used', examples=[0]
    )
    role: Role = Field(..., description='Role inside this project', examples=['Owner'])
    storage: Storage = Field(
        ..., description='Project storage type', examples=['individual']
    )
    url: str = Field(
        ...,
        description='Api endpoint',
        examples=['http://api.figshare.com/v2/account/projects/1'],
    )
    published_date: str = Field(
        ...,
        description='Date when project was published',
        examples=['2017-05-16T14:55:08Z'],
    )
    id: int = Field(..., description='Project id', examples=[1])
    title: str = Field(..., description='Project title', examples=['project'])


class Timeline(TimelineUpdate):
    posted: str = Field(..., description='Posted date', examples=['2015-12-31'])
    revision: str = Field(
        ...,
        description='Revision date from curation (if curated)',
        examples=['2015-12-31'],
    )
    submission: str = Field(
        ...,
        description='Submission date in curation (if curated)',
        examples=['2015-12-31'],
    )
    firstOnline: str = Field(
        ..., description='Online posted date', examples=['2015-12-31']
    )
    publisherPublication: str = Field(
        ..., description='Publish date', examples=['2015-12-31']
    )
    publisherAcceptance: str = Field(
        ...,
        description='Date when the item was accepted for publication',
        examples=['2015-12-31'],
    )


class AccountArticlesArticleIdFilesGetResponse(RootModel[List[PrivateFile]]):
    root: List[PrivateFile]


class AccountProjectsProjectIdArticlesArticleIdFilesGetResponse(
    RootModel[List[PrivateFile]]
):
    root: List[PrivateFile]


class Article(BaseModel):
    defined_type: int = Field(
        ..., description='Type of article identifier', examples=[3]
    )
    defined_type_name: str = Field(
        ..., description='Name of the article type identifier', examples=['media']
    )
    doi: str = Field(..., description='DOI', examples=['10.6084/m9.figshare.1434614'])
    group_id: float = Field(..., description='Group ID', examples=[1234])
    handle: str = Field(..., description='Handle', examples=['111184/figshare.1234'])
    id: int = Field(
        ..., description='Unique identifier for article', examples=[1434614]
    )
    published_date: str = Field(
        ..., description='Posted date', examples=['2015-12-31T23:59:59.000Z']
    )
    thumb: str = Field(
        ...,
        description='Thumbnail image',
        examples=[
            'https://ndownloader.figshare.com/files/123456789/preview/12345678/thumb.png'
        ],
    )
    timeline: Timeline
    title: str = Field(
        ..., description='Title of article', examples=['Test article title']
    )
    url: str = Field(
        ...,
        description='Api endpoint for article',
        examples=['http://api.figshare.com/articles/1434614'],
    )
    url_private_api: str = Field(
        ...,
        description='Private Api endpoint for article',
        examples=['https://api.figshare.com/account/articles/1434614'],
    )
    url_private_html: str = Field(
        ...,
        description='Private site endpoint for article',
        examples=['https://figshare.com/account/articles/1434614'],
    )
    url_public_api: str = Field(
        ...,
        description='Public Api endpoint for article',
        examples=['https://api.figshare.com/articles/1434614'],
    )
    url_public_html: str = Field(
        ...,
        description='Public site endpoint for article',
        examples=['https://figshare.com/articles/media/Test_article_title/1434614'],
    )


class ArticleWithProject(Article):
    project_id: int = Field(
        ..., description='Project id for this article.', examples=[1]
    )
    id: int = Field(
        ..., description='Unique identifier for article', examples=[1434614]
    )
    title: str = Field(
        ..., description='Title of article', examples=['Test article title']
    )
    doi: str = Field(..., description='DOI', examples=['10.6084/m9.figshare.1434614'])
    handle: str = Field(..., description='Handle', examples=['111184/figshare.1234'])
    group_id: float = Field(..., description='Group ID', examples=[1234])
    url: str = Field(
        ...,
        description='Api endpoint for article',
        examples=['http://api.figshare.com/articles/1434614'],
    )
    url_public_html: str = Field(
        ...,
        description='Public site endpoint for article',
        examples=['https://figshare.com/articles/media/Test_article_title/1434614'],
    )
    url_public_api: str = Field(
        ...,
        description='Public Api endpoint for article',
        examples=['https://api.figshare.com/articles/1434614'],
    )
    url_private_html: str = Field(
        ...,
        description='Private site endpoint for article',
        examples=['https://figshare.com/account/articles/1434614'],
    )
    url_private_api: str = Field(
        ...,
        description='Private Api endpoint for article',
        examples=['https://api.figshare.com/account/articles/1434614'],
    )
    published_date: str = Field(
        ..., description='Posted date', examples=['2015-12-31T23:59:59.000Z']
    )
    timeline: Timeline
    thumb: str = Field(
        ...,
        description='Thumbnail image',
        examples=[
            'https://ndownloader.figshare.com/files/123456789/preview/12345678/thumb.png'
        ],
    )
    defined_type: int = Field(
        ..., description='Type of article identifier', examples=[3]
    )
    defined_type_name: str = Field(
        ..., description='Name of the article type identifier', examples=['media']
    )


class Collection(BaseModel):
    doi: str = Field(
        ..., description='Collection DOI', examples=['10.6084/m9.figshare.123']
    )
    handle: str = Field(
        ..., description='Collection Handle', examples=['111184/figshare.1234']
    )
    id: int = Field(..., description='Collection id', examples=[123])
    published_date: str = Field(
        ...,
        description='Date when collection was published ',
        examples=['2015-08-12T00:39:55'],
    )
    timeline: Timeline
    title: str = Field(
        ..., description='Collection title', examples=['Sample collection']
    )
    url: str = Field(
        ...,
        description='Api endpoint',
        examples=['https://api.figshare.com/v2/collections/123'],
    )


class CollectionComplete(Collection):
    articles_count: int = Field(
        ..., description='Number of articles in collection', examples=[1]
    )
    authors: List[Author] = Field(..., description='List of collection authors')
    categories: List[Category] = Field(..., description='List of collection categories')
    citation: str = Field(..., description='Collection citation', examples=['citation'])
    created_date: str = Field(
        ...,
        description='Date when collection was created',
        examples=['2017-05-15T15:12:26Z'],
    )
    custom_fields: List[CustomArticleField] = Field(
        ..., description='Collection custom fields'
    )
    description: str = Field(
        ..., description='Collection description', examples=['description']
    )
    funding: List[FundingInformation] = Field(
        ..., description='Full Collection funding information'
    )
    group_id: int = Field(..., description='Collection group', examples=[1])
    group_resource_id: str = Field(
        ..., description='Collection group resource id', examples=[1]
    )
    institution_id: int = Field(..., description='Collection institution', examples=[1])
    modified_date: str = Field(
        ...,
        description='Date when collection was last modified',
        examples=['2017-05-15T15:12:26Z'],
    )
    public: bool = Field(
        ..., description='True if collection is published', examples=[True]
    )
    references: List[str] = Field(..., description='List of collection references')
    resource_doi: str = Field(
        ..., description='Collection resource doi', examples=['10.6084/m9.figshare.123']
    )
    resource_id: str = Field(..., description='Collection resource id', examples=[''])
    resource_link: str = Field(
        ..., description='Collection resource link', examples=['http://figshare.com']
    )
    resource_title: str = Field(
        ..., description='Collection resource title', examples=['test']
    )
    resource_version: int = Field(
        ..., description='Collection resource version', examples=[0]
    )
    tags: List[str] = Field(
        ..., description='List of collection tags', examples=[['t1', 't2']]
    )
    timeline: Timeline
    version: int = Field(..., description='Collection version', examples=[1])
    id: int = Field(..., description='Collection id', examples=[123])
    title: str = Field(
        ..., description='Collection title', examples=['Sample collection']
    )
    doi: str = Field(
        ..., description='Collection DOI', examples=['10.6084/m9.figshare.123']
    )
    handle: str = Field(
        ..., description='Collection Handle', examples=['111184/figshare.1234']
    )
    url: str = Field(
        ...,
        description='Api endpoint',
        examples=['https://api.figshare.com/v2/collections/123'],
    )
    published_date: str = Field(
        ...,
        description='Date when collection was published ',
        examples=['2015-08-12T00:39:55'],
    )


class CollectionCompletePrivate(Collection):
    account_id: int = Field(
        ..., description='ID of the account owning the collection', examples=[1000001]
    )
    articles_count: int = Field(
        ..., description='Number of articles in collection', examples=[1]
    )
    authors: List[Author] = Field(..., description='List of collection authors')
    categories: List[Category] = Field(..., description='List of collection categories')
    citation: str = Field(..., description='Collection citation', examples=['citation'])
    created_date: str = Field(
        ...,
        description='Date when collection was created',
        examples=['2017-05-15T15:12:26Z'],
    )
    custom_fields: List[CustomArticleField] = Field(
        ..., description='Collection custom fields'
    )
    description: str = Field(
        ..., description='Collection description', examples=['description']
    )
    funding: List[FundingInformation] = Field(
        ..., description='Full Collection funding information'
    )
    group_id: int = Field(..., description='Collection group', examples=[1])
    group_resource_id: str = Field(
        ..., description='Collection group resource id', examples=[1]
    )
    institution_id: int = Field(..., description='Collection institution', examples=[1])
    modified_date: str = Field(
        ...,
        description='Date when collection was last modified',
        examples=['2017-05-15T15:12:26Z'],
    )
    public: bool = Field(
        ..., description='True if collection is published', examples=[True]
    )
    references: List[str] = Field(..., description='List of collection references')
    resource_doi: str = Field(
        ..., description='Collection resource doi', examples=['10.6084/m9.figshare.123']
    )
    resource_id: str = Field(..., description='Collection resource id', examples=[''])
    resource_link: str = Field(
        ..., description='Collection resource link', examples=['http://figshare.com']
    )
    resource_title: str = Field(
        ..., description='Collection resource title', examples=['test']
    )
    resource_version: int = Field(
        ..., description='Collection resource version', examples=[0]
    )
    tags: List[str] = Field(
        ..., description='List of collection tags', examples=[['t1', 't2']]
    )
    timeline: Timeline
    version: int = Field(..., description='Collection version', examples=[1])
    id: int = Field(..., description='Collection id', examples=[123])
    title: str = Field(
        ..., description='Collection title', examples=['Sample collection']
    )
    doi: str = Field(
        ..., description='Collection DOI', examples=['10.6084/m9.figshare.123']
    )
    handle: str = Field(
        ..., description='Collection Handle', examples=['111184/figshare.1234']
    )
    url: str = Field(
        ...,
        description='Api endpoint',
        examples=['https://api.figshare.com/v2/collections/123'],
    )
    published_date: str = Field(
        ...,
        description='Date when collection was published ',
        examples=['2015-08-12T00:39:55'],
    )


class ProjectArticle(Article):
    categories: List[Category] = Field(
        ..., description='List of categories selected for the article'
    )
    citation: str = Field(
        ...,
        description='Article citation',
        examples=[
            'lilliput, figshare admin (2017): first project item. figshare.\n \n Retrieved: 14 01, May 22, 2017 (GMT)'
        ],
    )
    confidential_reason: str = Field(
        ..., description='Confidentiality reason', examples=['none']
    )
    created_date: str = Field(
        ...,
        description='Date when article was created',
        examples=['2017-05-18T11:49:03Z'],
    )
    description: str = Field(
        ..., description='Article description', examples=['article description']
    )
    embargo_date: str = Field(
        ..., description='Date when embargo lifts', examples=['2017-05-18T11:49:03Z']
    )
    embargo_reason: str = Field(
        ..., description='Reason for embargo', examples=['not complete']
    )
    embargo_title: str = Field(
        ..., description='Title for embargo', examples=['File(s) under embargo']
    )
    embargo_type: str = Field(..., description='Article embargo', examples=['article'])
    funding: str = Field(..., description='Article funding', examples=['none'])
    funding_list: List[int]
    has_linked_file: bool = Field(
        ..., description='True if any files are linked to the article', examples=[True]
    )
    is_active: bool = Field(
        ..., description='True if article is active', examples=[True]
    )
    is_confidential: bool = Field(
        ..., description='Article Confidentiality', examples=[True]
    )
    is_embargoed: bool = Field(
        ..., description='True if article is embargoed', examples=[True]
    )
    is_metadata_record: bool = Field(
        ..., description='True if article has no files', examples=[False]
    )
    is_public: bool = Field(
        ..., description='True if article is published', examples=[True]
    )
    license: License
    metadata_reason: str = Field(
        ..., description='Article metadata reason', examples=['hosted somewhere else']
    )
    modified_date: str = Field(
        ...,
        description='Date when article was last modified',
        examples=['2017-05-18T11:49:03Z'],
    )
    references: List[str] = Field(
        ...,
        description='List of references',
        examples=[['http://figshare.com', 'http://figshare.com/api']],
    )
    size: int = Field(..., description='Article size', examples=[69939])
    status: str = Field(..., description='Article status', examples=['public'])
    tags: List[str] = Field(
        ..., description='List of article tags', examples=[['t1', 't2', 't3']]
    )
    version: int = Field(..., description='Article version', examples=[1])
    id: int = Field(
        ..., description='Unique identifier for article', examples=[1434614]
    )
    title: str = Field(
        ..., description='Title of article', examples=['Test article title']
    )
    doi: str = Field(..., description='DOI', examples=['10.6084/m9.figshare.1434614'])
    handle: str = Field(..., description='Handle', examples=['111184/figshare.1234'])
    group_id: float = Field(..., description='Group ID', examples=[1234])
    url: str = Field(
        ...,
        description='Api endpoint for article',
        examples=['http://api.figshare.com/articles/1434614'],
    )
    url_public_html: str = Field(
        ...,
        description='Public site endpoint for article',
        examples=['https://figshare.com/articles/media/Test_article_title/1434614'],
    )
    url_public_api: str = Field(
        ...,
        description='Public Api endpoint for article',
        examples=['https://api.figshare.com/articles/1434614'],
    )
    url_private_html: str = Field(
        ...,
        description='Private site endpoint for article',
        examples=['https://figshare.com/account/articles/1434614'],
    )
    url_private_api: str = Field(
        ...,
        description='Private Api endpoint for article',
        examples=['https://api.figshare.com/account/articles/1434614'],
    )
    published_date: str = Field(
        ..., description='Posted date', examples=['2015-12-31T23:59:59.000Z']
    )
    timeline: Timeline
    thumb: str = Field(
        ...,
        description='Thumbnail image',
        examples=[
            'https://ndownloader.figshare.com/files/123456789/preview/12345678/thumb.png'
        ],
    )
    defined_type: int = Field(
        ..., description='Type of article identifier', examples=[3]
    )
    defined_type_name: str = Field(
        ..., description='Name of the article type identifier', examples=['media']
    )


class AccountArticlesGetResponse(RootModel[List[Article]]):
    root: List[Article]


class AccountArticlesSearchPostResponse(RootModel[List[ArticleWithProject]]):
    root: List[ArticleWithProject]


class AccountCollectionsGetResponse(RootModel[List[Collection]]):
    root: List[Collection]


class AccountCollectionsSearchPostResponse(RootModel[List[Collection]]):
    root: List[Collection]


class AccountCollectionsCollectionIdArticlesGetResponse(RootModel[List[Article]]):
    root: List[Article]


class AccountInstitutionArticlesGetResponse(RootModel[List[Article]]):
    root: List[Article]


class AccountProjectsProjectIdArticlesGetResponse(RootModel[List[Article]]):
    root: List[Article]


class ArticlesGetResponse(RootModel[List[Article]]):
    root: List[Article]


class ArticlesSearchPostResponse(RootModel[List[ArticleWithProject]]):
    root: List[ArticleWithProject]


class CollectionsGetResponse(RootModel[List[Collection]]):
    root: List[Collection]


class CollectionsSearchPostResponse(RootModel[List[Collection]]):
    root: List[Collection]


class CollectionsCollectionIdArticlesGetResponse(RootModel[List[Article]]):
    root: List[Article]


class InstitutionsInstitutionStringIdArticlesFilterByGetResponse(
    RootModel[List[Article]]
):
    root: List[Article]


class ProjectsProjectIdArticlesGetResponse(RootModel[List[Article]]):
    root: List[Article]


class ArticleComplete(ProjectArticle):
    authors: List[Author] = Field(..., description='List of article authors')
    custom_fields: List[CustomArticleField] = Field(
        ..., description='List of custom fields values'
    )
    embargo_options: List[GroupEmbargoOptions] = Field(
        ..., description='List of embargo options'
    )
    figshare_url: str = Field(
        ...,
        description='Article public url',
        examples=['http://figshare.com/articles/media/article_name/2000005'],
    )
    files: List[PublicFile] = Field(..., description='List of article files')
    resource_doi: str = Field(
        ...,
        description='Article DOI',
        examples=['10.5072/FK2.developmentfigshare.2000005'],
    )
    resource_title: str = Field(
        ..., description='Article resource title', examples=['first article']
    )
    citation: str = Field(
        ...,
        description='Article citation',
        examples=[
            'lilliput, figshare admin (2017): first project item. figshare.\n \n Retrieved: 14 01, May 22, 2017 (GMT)'
        ],
    )
    confidential_reason: str = Field(
        ..., description='Confidentiality reason', examples=['none']
    )
    embargo_type: str = Field(..., description='Article embargo', examples=['article'])
    is_confidential: bool = Field(
        ..., description='Article Confidentiality', examples=[True]
    )
    size: int = Field(..., description='Article size', examples=[69939])
    funding: str = Field(..., description='Article funding', examples=['none'])
    funding_list: List[int]
    tags: List[str] = Field(
        ..., description='List of article tags', examples=[['t1', 't2', 't3']]
    )
    version: int = Field(..., description='Article version', examples=[1])
    is_active: bool = Field(
        ..., description='True if article is active', examples=[True]
    )
    is_metadata_record: bool = Field(
        ..., description='True if article has no files', examples=[False]
    )
    metadata_reason: str = Field(
        ..., description='Article metadata reason', examples=['hosted somewhere else']
    )
    status: str = Field(..., description='Article status', examples=['public'])
    description: str = Field(
        ..., description='Article description', examples=['article description']
    )
    is_embargoed: bool = Field(
        ..., description='True if article is embargoed', examples=[True]
    )
    embargo_date: str = Field(
        ..., description='Date when embargo lifts', examples=['2017-05-18T11:49:03Z']
    )
    is_public: bool = Field(
        ..., description='True if article is published', examples=[True]
    )
    modified_date: str = Field(
        ...,
        description='Date when article was last modified',
        examples=['2017-05-18T11:49:03Z'],
    )
    created_date: str = Field(
        ...,
        description='Date when article was created',
        examples=['2017-05-18T11:49:03Z'],
    )
    has_linked_file: bool = Field(
        ..., description='True if any files are linked to the article', examples=[True]
    )
    categories: List[Category] = Field(
        ..., description='List of categories selected for the article'
    )
    license: License
    embargo_title: str = Field(
        ..., description='Title for embargo', examples=['File(s) under embargo']
    )
    embargo_reason: str = Field(
        ..., description='Reason for embargo', examples=['not complete']
    )
    references: List[str] = Field(
        ...,
        description='List of references',
        examples=[['http://figshare.com', 'http://figshare.com/api']],
    )
    id: int = Field(
        ..., description='Unique identifier for article', examples=[1434614]
    )
    title: str = Field(
        ..., description='Title of article', examples=['Test article title']
    )
    doi: str = Field(..., description='DOI', examples=['10.6084/m9.figshare.1434614'])
    handle: str = Field(..., description='Handle', examples=['111184/figshare.1234'])
    group_id: float = Field(..., description='Group ID', examples=[1234])
    url: str = Field(
        ...,
        description='Api endpoint for article',
        examples=['http://api.figshare.com/articles/1434614'],
    )
    url_public_html: str = Field(
        ...,
        description='Public site endpoint for article',
        examples=['https://figshare.com/articles/media/Test_article_title/1434614'],
    )
    url_public_api: str = Field(
        ...,
        description='Public Api endpoint for article',
        examples=['https://api.figshare.com/articles/1434614'],
    )
    url_private_html: str = Field(
        ...,
        description='Private site endpoint for article',
        examples=['https://figshare.com/account/articles/1434614'],
    )
    url_private_api: str = Field(
        ...,
        description='Private Api endpoint for article',
        examples=['https://api.figshare.com/account/articles/1434614'],
    )
    published_date: str = Field(
        ..., description='Posted date', examples=['2015-12-31T23:59:59.000Z']
    )
    timeline: Timeline
    thumb: str = Field(
        ...,
        description='Thumbnail image',
        examples=[
            'https://ndownloader.figshare.com/files/123456789/preview/12345678/thumb.png'
        ],
    )
    defined_type: int = Field(
        ..., description='Type of article identifier', examples=[3]
    )
    defined_type_name: str = Field(
        ..., description='Name of the article type identifier', examples=['media']
    )


class ArticleCompletePrivate(ArticleComplete):
    account_id: int = Field(
        ..., description='ID of the account owning the article', examples=[1000001]
    )
    group_resource_id: str = Field(
        ..., description='Group resource id', examples=[None]
    )
    figshare_url: str = Field(
        ...,
        description='Article public url',
        examples=['http://figshare.com/articles/media/article_name/2000005'],
    )
    resource_title: str = Field(
        ..., description='Article resource title', examples=['first article']
    )
    resource_doi: str = Field(
        ...,
        description='Article DOI',
        examples=['10.5072/FK2.developmentfigshare.2000005'],
    )
    files: List[PublicFile] = Field(..., description='List of article files')
    authors: List[Author] = Field(..., description='List of article authors')
    custom_fields: List[CustomArticleField] = Field(
        ..., description='List of custom fields values'
    )
    embargo_options: List[GroupEmbargoOptions] = Field(
        ..., description='List of embargo options'
    )
    citation: str = Field(
        ...,
        description='Article citation',
        examples=[
            'lilliput, figshare admin (2017): first project item. figshare.\n \n Retrieved: 14 01, May 22, 2017 (GMT)'
        ],
    )
    confidential_reason: str = Field(
        ..., description='Confidentiality reason', examples=['none']
    )
    embargo_type: str = Field(..., description='Article embargo', examples=['article'])
    is_confidential: bool = Field(
        ..., description='Article Confidentiality', examples=[True]
    )
    size: int = Field(..., description='Article size', examples=[69939])
    funding: str = Field(..., description='Article funding', examples=['none'])
    funding_list: List[int]
    tags: List[str] = Field(
        ..., description='List of article tags', examples=[['t1', 't2', 't3']]
    )
    version: int = Field(..., description='Article version', examples=[1])
    is_active: bool = Field(
        ..., description='True if article is active', examples=[True]
    )
    is_metadata_record: bool = Field(
        ..., description='True if article has no files', examples=[False]
    )
    metadata_reason: str = Field(
        ..., description='Article metadata reason', examples=['hosted somewhere else']
    )
    status: str = Field(..., description='Article status', examples=['public'])
    description: str = Field(
        ..., description='Article description', examples=['article description']
    )
    is_embargoed: bool = Field(
        ..., description='True if article is embargoed', examples=[True]
    )
    embargo_date: str = Field(
        ..., description='Date when embargo lifts', examples=['2017-05-18T11:49:03Z']
    )
    is_public: bool = Field(
        ..., description='True if article is published', examples=[True]
    )
    modified_date: str = Field(
        ...,
        description='Date when article was last modified',
        examples=['2017-05-18T11:49:03Z'],
    )
    created_date: str = Field(
        ...,
        description='Date when article was created',
        examples=['2017-05-18T11:49:03Z'],
    )
    has_linked_file: bool = Field(
        ..., description='True if any files are linked to the article', examples=[True]
    )
    categories: List[Category] = Field(
        ..., description='List of categories selected for the article'
    )
    license: License
    embargo_title: str = Field(
        ..., description='Title for embargo', examples=['File(s) under embargo']
    )
    embargo_reason: str = Field(
        ..., description='Reason for embargo', examples=['not complete']
    )
    references: List[str] = Field(
        ...,
        description='List of references',
        examples=[['http://figshare.com', 'http://figshare.com/api']],
    )
    id: int = Field(
        ..., description='Unique identifier for article', examples=[1434614]
    )
    title: str = Field(
        ..., description='Title of article', examples=['Test article title']
    )
    doi: str = Field(..., description='DOI', examples=['10.6084/m9.figshare.1434614'])
    handle: str = Field(..., description='Handle', examples=['111184/figshare.1234'])
    group_id: float = Field(..., description='Group ID', examples=[1234])
    url: str = Field(
        ...,
        description='Api endpoint for article',
        examples=['http://api.figshare.com/articles/1434614'],
    )
    url_public_html: str = Field(
        ...,
        description='Public site endpoint for article',
        examples=['https://figshare.com/articles/media/Test_article_title/1434614'],
    )
    url_public_api: str = Field(
        ...,
        description='Public Api endpoint for article',
        examples=['https://api.figshare.com/articles/1434614'],
    )
    url_private_html: str = Field(
        ...,
        description='Private site endpoint for article',
        examples=['https://figshare.com/account/articles/1434614'],
    )
    url_private_api: str = Field(
        ...,
        description='Private Api endpoint for article',
        examples=['https://api.figshare.com/account/articles/1434614'],
    )
    published_date: str = Field(
        ..., description='Posted date', examples=['2015-12-31T23:59:59.000Z']
    )
    timeline: Timeline
    thumb: str = Field(
        ...,
        description='Thumbnail image',
        examples=[
            'https://ndownloader.figshare.com/files/123456789/preview/12345678/thumb.png'
        ],
    )
    defined_type: int = Field(
        ..., description='Type of article identifier', examples=[3]
    )
    defined_type_name: str = Field(
        ..., description='Name of the article type identifier', examples=['media']
    )


class CurationDetail(Curation):
    item: ArticleComplete
    id: int = Field(..., description='The review id')
    group_id: int = Field(..., description='The group in which the article is present.')
    account_id: int = Field(
        ...,
        description='The ID of the account of the owner of the article of this review.',
    )
    assigned_to: int = Field(
        ..., description='The ID of the account to which this review is assigned.'
    )
    article_id: int = Field(..., description='The ID of the article of this review.')
    version: int = Field(
        ..., description='The Version number of the article in review.'
    )
    comments_count: int = Field(
        ..., description='The number of comments in the review.'
    )
    status: Status1 = Field(..., description='The status of the review.')
    created_date: str = Field(..., description='The creation date of the review.')
    modified_date: str = Field(
        ..., description='The date the review has been modified.'
    )
    review_date: str = Field(
        ..., description='The last time a comment has been added to the review.'
    )
