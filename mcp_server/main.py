# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:08:44+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Header, UploadFile
from pydantic import conint

from models import (
    Account,
    AccountArticlesArticleIdAuthorsGetResponse,
    AccountArticlesArticleIdCategoriesGetResponse,
    AccountArticlesArticleIdFilesGetResponse,
    AccountArticlesArticleIdPrivateLinksGetResponse,
    AccountArticlesExportGetResponse,
    AccountArticlesGetResponse,
    AccountArticlesSearchPostResponse,
    AccountAuthorsSearchPostResponse,
    AccountCategoriesGetResponse,
    AccountCollectionsCollectionIdArticlesGetResponse,
    AccountCollectionsCollectionIdAuthorsGetResponse,
    AccountCollectionsCollectionIdCategoriesGetResponse,
    AccountCollectionsCollectionIdPrivateLinksGetResponse,
    AccountCollectionsGetResponse,
    AccountCollectionsSearchPostResponse,
    AccountCreate,
    AccountFundingSearchPostResponse,
    AccountGroupRoles,
    AccountGroupRolesCreate,
    AccountInstitutionAccountsGetResponse,
    AccountInstitutionAccountsSearchPostResponse,
    AccountInstitutionArticlesGetResponse,
    AccountInstitutionCustomFieldsCustomFieldIdItemsUploadPostResponse,
    AccountInstitutionCustomFieldsGetResponse,
    AccountInstitutionEmbargoOptionsGetResponse,
    AccountInstitutionGroupsGetResponse,
    AccountInstitutionGroupsGroupIdEmbargoOptionsGetResponse,
    AccountInstitutionRolesGetResponse,
    AccountLicensesGetResponse,
    AccountProjectsGetResponse,
    AccountProjectsProjectIdArticlesArticleIdFilesGetResponse,
    AccountProjectsProjectIdArticlesGetResponse,
    AccountProjectsProjectIdCollaboratorsGetResponse,
    AccountProjectsProjectIdNotesGetResponse,
    AccountProjectsSearchPostResponse,
    AccountReport,
    AccountUpdate,
    ArticleComplete,
    ArticleCompletePrivate,
    ArticleConfidentiality,
    ArticleCreate,
    ArticleDOI,
    ArticleEmbargo,
    ArticleEmbargoUpdater,
    ArticleHandle,
    ArticleProjectCreate,
    ArticlesArticleIdFilesGetResponse,
    ArticlesArticleIdVersionsGetResponse,
    ArticlesCreator,
    ArticleSearch,
    ArticlesGetResponse,
    ArticlesSearchPostResponse,
    ArticleUpdate,
    AuthorComplete,
    AuthorsCreator,
    CategoriesCreator,
    CategoriesGetResponse,
    CollectionComplete,
    CollectionCompletePrivate,
    CollectionCreate,
    CollectionDOI,
    CollectionHandle,
    CollectionPrivateLinkCreator,
    CollectionsCollectionIdArticlesGetResponse,
    CollectionsCollectionIdVersionsGetResponse,
    CollectionSearch,
    CollectionsGetResponse,
    CollectionsSearchPostResponse,
    CollectionUpdate,
    ConfidentialityCreator,
    CreateProjectResponse,
    Curation,
    CurationComment,
    CurationCommentCreate,
    CurationDetail,
    ErrorMessage,
    FileCreator,
    FileId,
    FundingSearch,
    Institution,
    InstitutionAccountsSearch,
    InstitutionsInstitutionStringIdArticlesFilterByGetResponse,
    ItemTypesGetResponse,
    LicensesGetResponse,
    Location,
    LocationWarnings,
    LocationWarningsUpdate,
    Order4,
    Order6,
    Order8,
    Order10,
    Order12,
    Order14,
    OrderDirection,
    PrivateArticleSearch,
    PrivateAuthorsSearch,
    PrivateCollectionSearch,
    PrivateFile,
    PrivateLinkCreator,
    PrivateLinkResponse,
    ProjectArticle,
    ProjectCollaboratorInvite,
    ProjectComplete,
    ProjectCompletePrivate,
    ProjectCreate,
    ProjectNoteCreate,
    ProjectNotePrivate,
    ProjectsGetResponse,
    ProjectsProjectIdArticlesGetResponse,
    ProjectsSearch,
    ProjectsSearchPostResponse,
    ProjectUpdate,
    PublicFile,
    Resource,
    ResponseMessage,
    Status4,
    Storage1,
    User,
)

app = MCPProxy(
    description='Figshare apiv2. Using Swagger 2.0',
    title='Figshare API',
    version='2.0.0',
    servers=[{'url': 'https://api.figshare.com/v2'}],
)


@app.get(
    '/account',
    description=""" Account information for token/personal token """,
    tags=['private_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_account():
    """
    Private Account information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/articles',
    description=""" Get Own Articles """,
    tags=[
        'private_article_management',
        'private_article_crud',
        'private_article_searching',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_articles_list(
    page: Optional[conint(ge=1, le=5000)] = None,
    page_size: Optional[conint(ge=1, le=1000)] = 10,
    limit: Optional[conint(ge=1, le=1000)] = None,
    offset: Optional[conint(ge=0, le=5000)] = None,
):
    """
    Private Articles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/articles',
    description=""" Create a new Article by sending article information """,
    tags=['private_article_crud', 'private_article_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_create(body: ArticleCreate):
    """
    Create new Article
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/articles/export',
    description=""" Return status on all reports generated for the account from the oauth credentials """,
    tags=['private_account_management', 'private_article_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def account_article_report(group_id: Optional[int] = None):
    """
    Account Article Report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/articles/export',
    description=""" Initiate a new Article Report for this Account. There is a limit of 1 report per day. """,
    tags=['private_account_management', 'private_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def account_article_report_generate():
    """
    Initiate a new Report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/articles/search',
    description=""" Returns a list of private articles filtered by the search parameters """,
    tags=['private_article_searching', 'private_article_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_articles_search(body: PrivateArticleSearch):
    """
    Private Articles search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/articles/{article_id}',
    description=""" Delete an article """,
    tags=['private_article_crud', 'private_article_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_delete(article_id: conint(ge=1)):
    """
    Delete article
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/articles/{article_id}',
    description=""" View a private article """,
    tags=['private_article_management', 'private_article_crud'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_details(article_id: conint(ge=1)):
    """
    Article details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/articles/{article_id}',
    description=""" Updating an article by passing body parameters; request can also be made with the PATCH method. """,
    tags=['private_article_crud', 'private_article_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_update(article_id: conint(ge=1), body: ArticleUpdate = ...):
    """
    Update article
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/articles/{article_id}/authors',
    description=""" List article authors """,
    tags=['private_article_authors_management', 'private_author_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_authors_list(article_id: conint(ge=1)):
    """
    List article authors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/articles/{article_id}/authors',
    description=""" Associate new authors with the article. This will add new authors to the list of already associated authors """,
    tags=[
        'private_article_authors_management',
        'private_article_crud',
        'private_article_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_authors_add(article_id: conint(ge=1), body: AuthorsCreator = ...):
    """
    Add article authors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/articles/{article_id}/authors',
    description=""" Associate new authors with the article. This will remove all already associated authors and add these new ones """,
    tags=[
        'private_article_authors_management',
        'private_article_crud',
        'private_article_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_authors_replace(
    article_id: conint(ge=1), body: AuthorsCreator = ...
):
    """
    Replace article authors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/articles/{article_id}/authors/{author_id}',
    description=""" De-associate author from article """,
    tags=[
        'private_article_authors_management',
        'private_article_management',
        'private_author_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_author_delete(
    article_id: conint(ge=1), author_id: conint(ge=1) = ...
):
    """
    Delete article author
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/articles/{article_id}/categories',
    description=""" List article categories """,
    tags=['private_article_categories_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_categories_list(article_id: conint(ge=1)):
    """
    List article categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/articles/{article_id}/categories',
    description=""" Associate new categories with the article. This will add new categories to the list of already associated categories """,
    tags=['private_article_categories_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_categories_add(
    article_id: conint(ge=1), body: CategoriesCreator = ...
):
    """
    Add article categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/articles/{article_id}/categories',
    description=""" Associate new categories with the article. This will remove all already associated categories and add these new ones """,
    tags=[
        'private_article_categories_management',
        'private_article_crud',
        'private_article_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_categories_replace(
    article_id: conint(ge=1), body: CategoriesCreator = ...
):
    """
    Replace article categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/articles/{article_id}/categories/{category_id}',
    description=""" De-associate category from article """,
    tags=['private_article_categories_management', 'private_article_crud'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_category_delete(
    article_id: conint(ge=1), category_id: conint(ge=1) = ...
):
    """
    Delete article category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/articles/{article_id}/confidentiality',
    description=""" Delete confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows. """,
    tags=[
        'private_article_confidentiality_management',
        'private_article_crud',
        'private_article_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_confidentiality_delete(article_id: conint(ge=1)):
    """
    Delete article confidentiality
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/articles/{article_id}/confidentiality',
    description=""" View confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows. """,
    tags=['private_article_confidentiality_management', 'private_article_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_confidentiality_details(article_id: conint(ge=1)):
    """
    Article confidentiality details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/articles/{article_id}/confidentiality',
    description=""" Update confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows. """,
    tags=[
        'private_article_confidentiality_management',
        'private_article_management',
        'private_article_crud',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_confidentiality_update(
    article_id: conint(ge=1), body: ConfidentialityCreator = ...
):
    """
    Update article confidentiality
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/articles/{article_id}/embargo',
    description=""" Will lift the embargo for the specified article """,
    tags=[
        'private_article_embargo_management',
        'private_article_crud',
        'private_article_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_embargo_delete(article_id: conint(ge=1)):
    """
    Delete Article Embargo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/articles/{article_id}/embargo',
    description=""" View a private article embargo details """,
    tags=['private_article_embargo_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_embargo_details(article_id: conint(ge=1)):
    """
    Article Embargo Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/articles/{article_id}/embargo',
    description=""" Note: setting an article under whole embargo does not imply that the article will be published when the embargo will expire. You must explicitly call the publish endpoint to enable this functionality. """,
    tags=['private_article_embargo_management', 'private_article_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_embargo_update(
    article_id: conint(ge=1), body: ArticleEmbargoUpdater = ...
):
    """
    Update Article Embargo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/articles/{article_id}/files',
    description=""" List private files """,
    tags=[
        'private_article_file_management',
        'private_article_crud',
        'private_article_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_files_list(article_id: conint(ge=1)):
    """
    List article files
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/articles/{article_id}/files',
    description=""" Initiate a new file upload within the article. Either use the link property to point to an existing file that resides elsewhere and will not be uploaded to Figshare or use the other 3 parameters (md5, name, size). """,
    tags=['private_article_file_management', 'private_article_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_upload_initiate(article_id: conint(ge=1), body: FileCreator = ...):
    """
    Initiate Upload
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/articles/{article_id}/files/{file_id}',
    description=""" Complete file upload """,
    tags=['private_article_file_management', 'private_article_crud'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_file_delete(article_id: conint(ge=1), file_id: conint(ge=1) = ...):
    """
    File Delete
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/articles/{article_id}/files/{file_id}',
    description=""" View details of file for specified article """,
    tags=['private_article_file_management', 'private_article_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_file(article_id: conint(ge=1), file_id: conint(ge=1) = ...):
    """
    Single File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/articles/{article_id}/files/{file_id}',
    description=""" Complete file upload """,
    tags=['private_article_file_management', 'file_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_upload_complete(
    article_id: conint(ge=1), file_id: conint(ge=1) = ...
):
    """
    Complete Upload
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/articles/{article_id}/private_links',
    description=""" List private links """,
    tags=[
        'private_article_link_management',
        'private_article_crud',
        'private_article_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_private_link(article_id: conint(ge=1)):
    """
    List private links
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/articles/{article_id}/private_links',
    description=""" Create new private link for this article """,
    tags=['private_article_link_management', 'private_article_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_private_link_create(
    article_id: conint(ge=1), body: PrivateLinkCreator = None
):
    """
    Create private link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/articles/{article_id}/private_links/{link_id}',
    description=""" Disable/delete private link for this article """,
    tags=['private_article_link_management', 'private_article_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_private_link_delete(article_id: conint(ge=1), link_id: str = ...):
    """
    Disable private link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/articles/{article_id}/private_links/{link_id}',
    description=""" Update existing private link for this article """,
    tags=[
        'private_article_link_management',
        'private_article_crud',
        'private_article_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_private_link_update(
    article_id: conint(ge=1), link_id: str = ..., body: PrivateLinkCreator = None
):
    """
    Update private link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/articles/{article_id}/publish',
    description=""" - If the whole article is under embargo, it will not be published immediately, but when the embargo expires or is lifted.
- When an article is published, a new public version will be generated. Any further updates to the article will affect the private article data. In order to make these changes publicly visible, an explicit publish operation is needed. """,
    tags=['private_article_management', 'private_article_crud'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_publish(article_id: conint(ge=1)):
    """
    Private Article Publish
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/articles/{article_id}/reserve_doi',
    description=""" Reserve DOI for article """,
    tags=['private_article_management', 'private_article_confidentiality_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_reserve_doi(article_id: conint(ge=1)):
    """
    Private Article Reserve DOI
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/articles/{article_id}/reserve_handle',
    description=""" Reserve Handle for article """,
    tags=['private_article_management', 'private_article_crud'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_reserve_handle(article_id: conint(ge=1)):
    """
    Private Article Reserve Handle
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/articles/{article_id}/resource',
    description=""" Edit article resource data. """,
    tags=['private_article_crud', 'private_article_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_article_resource(article_id: conint(ge=1), body: Resource = ...):
    """
    Private Article Resource
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/articles/{article_id}/versions/{version_id}/',
    description=""" Updating an article version by passing body parameters; request can also be made with the PATCH method. """,
    tags=['private_article_crud', 'private_article_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def article_version_update(
    article_id: conint(ge=1), version_id: conint(ge=1) = ..., body: ArticleUpdate = ...
):
    """
    Update article version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/articles/{article_id}/versions/{version_id}/update_thumb',
    description=""" For a given public article version update the article thumbnail by choosing one of the associated files """,
    tags=['private_article_management', 'private_article_file_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def article_version_update_thumb(
    article_id: conint(ge=1), version_id: conint(ge=1) = ..., body: FileId = ...
):
    """
    Update article version thumbnail
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/authors/search',
    description=""" Search for authors """,
    tags=['private_author_management', 'private_article_authors_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_authors_search(body: PrivateAuthorsSearch = None):
    """
    Search Authors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/authors/{author_id}',
    description=""" View author details """,
    tags=['private_author_management', 'private_article_authors_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_author_details(author_id: conint(ge=1)):
    """
    Author details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/categories',
    description=""" List institution categories (including parent Categories) """,
    tags=[
        'private_account_management',
        'private_collection_management',
        'private_article_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_categories_list():
    """
    Private Account Categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/collections',
    description=""" List private collections """,
    tags=['private_collection_management', 'private_collection_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collections_list(
    page: Optional[conint(ge=1, le=5000)] = None,
    page_size: Optional[conint(ge=1, le=1000)] = 10,
    limit: Optional[conint(ge=1, le=1000)] = None,
    offset: Optional[conint(ge=0, le=5000)] = None,
    order: Optional[Order4] = 'published_date',
    order_direction: Optional[OrderDirection] = 'desc',
):
    """
    Private Collections List
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/collections',
    description=""" Create a new Collection by sending collection information """,
    tags=[
        'private_collection_management',
        'private_collection_operations',
        'collection_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_create(body: CollectionCreate):
    """
    Create collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/collections/search',
    description=""" Returns a list of private Collections """,
    tags=[
        'private_collection_management',
        'private_collection_operations',
        'private_collection_article_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collections_search(body: PrivateCollectionSearch):
    """
    Private Collections Search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/collections/{collection_id}',
    description=""" Delete n collection """,
    tags=[
        'private_collection_management',
        'private_collection_operations',
        'collection_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_delete(collection_id: conint(ge=1)):
    """
    Delete collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/collections/{collection_id}',
    description=""" View a collection """,
    tags=[
        'private_collection_management',
        'private_collection_operations',
        'private_collection_article_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_details(collection_id: conint(ge=1)):
    """
    Collection details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/collections/{collection_id}',
    description=""" Update collection details; request can also be made with the PATCH method. """,
    tags=[
        'private_collection_management',
        'private_collection_operations',
        'collection_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_update(
    collection_id: conint(ge=1), body: CollectionUpdate = ...
):
    """
    Update collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/collections/{collection_id}/articles',
    description=""" List collection articles """,
    tags=[
        'private_collection_management',
        'private_collection_article_management',
        'collection_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_articles_list(
    page: Optional[conint(ge=1, le=5000)] = None,
    page_size: Optional[conint(ge=1, le=1000)] = 10,
    limit: Optional[conint(ge=1, le=1000)] = None,
    offset: Optional[conint(ge=0, le=5000)] = None,
    collection_id: conint(ge=1) = ...,
):
    """
    List collection articles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/collections/{collection_id}/articles',
    description=""" Associate new articles with the collection. This will add new articles to the list of already associated articles """,
    tags=['private_collection_article_management', 'private_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_articles_add(
    collection_id: conint(ge=1), body: ArticlesCreator = ...
):
    """
    Add collection articles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/collections/{collection_id}/articles',
    description=""" Associate new articles with the collection. This will remove all already associated articles and add these new ones """,
    tags=[
        'private_collection_article_management',
        'private_collection_management',
        'private_article_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_articles_replace(
    collection_id: conint(ge=1), body: ArticlesCreator = ...
):
    """
    Replace collection articles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/collections/{collection_id}/articles/{article_id}',
    description=""" De-associate article from collection """,
    tags=['private_collection_article_management', 'private_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_article_delete(
    collection_id: conint(ge=1), article_id: conint(ge=1) = ...
):
    """
    Delete collection article
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/collections/{collection_id}/authors',
    description=""" List collection authors """,
    tags=[
        'private_collection_author_management',
        'private_author_management',
        'private_collection_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_authors_list(collection_id: conint(ge=1)):
    """
    List collection authors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/collections/{collection_id}/authors',
    description=""" Associate new authors with the collection. This will add new authors to the list of already associated authors """,
    tags=['private_collection_author_management', 'private_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_authors_add(
    collection_id: conint(ge=1), body: AuthorsCreator = ...
):
    """
    Add collection authors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/collections/{collection_id}/authors',
    description=""" Associate new authors with the collection. This will remove all already associated authors and add these new ones """,
    tags=[
        'private_collection_author_management',
        'private_collection_management',
        'private_article_authors_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_authors_replace(
    collection_id: conint(ge=1), body: AuthorsCreator = ...
):
    """
    Replace collection authors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/collections/{collection_id}/authors/{author_id}',
    description=""" Delete collection author """,
    tags=['private_collection_author_management', 'private_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_author_delete(
    collection_id: conint(ge=1), author_id: conint(ge=1) = ...
):
    """
    Delete collection author
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/collections/{collection_id}/categories',
    description=""" List collection categories """,
    tags=[
        'private_collection_category_management',
        'private_collection_management',
        'collection_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_categories_list(collection_id: conint(ge=1)):
    """
    List collection categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/collections/{collection_id}/categories',
    description=""" Associate new categories with the collection. This will add new categories to the list of already associated categories """,
    tags=['private_collection_category_management', 'private_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_categories_add(
    collection_id: conint(ge=1), body: CategoriesCreator = ...
):
    """
    Add collection categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/collections/{collection_id}/categories',
    description=""" Associate new categories with the collection. This will remove all already associated categories and add these new ones """,
    tags=['private_collection_category_management', 'private_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_categories_replace(
    collection_id: conint(ge=1), body: CategoriesCreator = ...
):
    """
    Replace collection categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/collections/{collection_id}/categories/{category_id}',
    description=""" De-associate category from collection """,
    tags=['private_collection_category_management', 'private_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_category_delete(
    collection_id: conint(ge=1), category_id: conint(ge=1) = ...
):
    """
    Delete collection category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/collections/{collection_id}/private_links',
    description=""" List article private links """,
    tags=[
        'private_collection_private_link_management',
        'private_collection_management',
        'private_article_link_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_private_links_list(collection_id: conint(ge=1)):
    """
    List collection private links
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/collections/{collection_id}/private_links',
    description=""" Create new private link """,
    tags=[
        'private_collection_private_link_management',
        'private_collection_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_private_link_create(
    collection_id: conint(ge=1), body: CollectionPrivateLinkCreator = None
):
    """
    Create collection private link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/collections/{collection_id}/private_links/{link_id}',
    description=""" Disable/delete private link for this collection """,
    tags=[
        'private_collection_private_link_management',
        'private_collection_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_private_link_delete(
    collection_id: conint(ge=1), link_id: str = ...
):
    """
    Disable private link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/collections/{collection_id}/private_links/{link_id}',
    description=""" Update existing private link for this collection """,
    tags=[
        'private_collection_private_link_management',
        'private_collection_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_private_link_update(
    collection_id: conint(ge=1),
    link_id: str = ...,
    body: CollectionPrivateLinkCreator = None,
):
    """
    Update collection private link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/collections/{collection_id}/publish',
    description=""" When a collection is published, a new public version will be generated. Any further updates to the collection will affect the private collection data. In order to make these changes publicly visible, an explicit publish operation is needed. """,
    tags=['private_collection_management', 'private_collection_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_publish(collection_id: conint(ge=1)):
    """
    Private Collection Publish
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/collections/{collection_id}/reserve_doi',
    description=""" Reserve DOI for collection """,
    tags=['private_collection_management', 'private_collection_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_reserve_doi(collection_id: conint(ge=1)):
    """
    Private Collection Reserve DOI
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/collections/{collection_id}/reserve_handle',
    description=""" Reserve Handle for collection """,
    tags=[
        'private_collection_management',
        'private_collection_operations',
        'private_collection_article_management',
        'private_collection_author_management',
        'private_collection_category_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_reserve_handle(collection_id: conint(ge=1)):
    """
    Private Collection Reserve Handle
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/collections/{collection_id}/resource',
    description=""" Edit collection resource data. """,
    tags=[
        'private_collection_management',
        'private_collection_operations',
        'private_collection_article_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_collection_resource(collection_id: conint(ge=1), body: Resource = ...):
    """
    Private Collection Resource
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/funding/search',
    description=""" Search for fundings """,
    tags=['private_article_searching', 'private_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_funding_search(body: FundingSearch = None):
    """
    Search Funding
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/institution',
    description=""" Account institution details """,
    tags=['private_institution_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_institution_details():
    """
    Private Account Institutions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/institution/accounts',
    description=""" Returns the accounts for which the account has administrative privileges (assigned and inherited). """,
    tags=['private_institution_account_management', 'institution_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_institution_accounts_list(
    page: Optional[conint(ge=1, le=5000)] = None,
    page_size: Optional[conint(ge=1, le=1000)] = 10,
    limit: Optional[conint(ge=1, le=1000)] = None,
    offset: Optional[conint(ge=0, le=5000)] = None,
    is_active: Optional[conint(ge=0, le=1)] = None,
    institution_user_id: Optional[str] = None,
    email: Optional[str] = None,
    id_lte: Optional[conint(ge=0)] = None,
    id_gte: Optional[conint(ge=0)] = None,
):
    """
    Private Account Institution Accounts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/institution/accounts',
    description=""" Create a new Account by sending account information """,
    tags=['private_institution_account_management', 'institution_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_institution_accounts_create(body: AccountCreate):
    """
    Create new Institution Account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/institution/accounts/search',
    description=""" Returns the accounts for which the account has administrative privileges (assigned and inherited). """,
    tags=['private_institution_account_management', 'institution_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_institution_accounts_search(body: InstitutionAccountsSearch):
    """
    Private Account Institution Accounts Search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/institution/accounts/{account_id}',
    description=""" Update Institution Account """,
    tags=['private_institution_account_management', 'institution_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_institution_accounts_update(
    account_id: conint(ge=1), body: AccountUpdate = ...
):
    """
    Update Institution Account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/institution/articles',
    description=""" Get Articles from own institution. User must be administrator of the institution """,
    tags=['private_article_management', 'private_article_searching'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_institution_articles(
    page: Optional[conint(ge=1, le=5000)] = None,
    page_size: Optional[conint(ge=1, le=1000)] = 10,
    limit: Optional[conint(ge=1, le=1000)] = None,
    offset: Optional[conint(ge=0, le=5000)] = None,
    order: Optional[Order6] = 'published_date',
    order_direction: Optional[OrderDirection] = 'desc',
    published_since: Optional[str] = None,
    modified_since: Optional[str] = None,
    status: Optional[int] = None,
    resource_doi: Optional[str] = None,
    item_type: Optional[int] = None,
):
    """
    Private Institution Articles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/institution/custom_fields',
    description=""" Returns the custom fields in the group the user belongs to, or the ones in the group specified, if the user has access. """,
    tags=['private_institution_account_management', 'custom_fields_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def custom_fields_list(group_id: Optional[int] = None):
    """
    Private account institution group custom fields
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/institution/custom_fields/{custom_field_id}/items/upload',
    description=""" Uploads a CSV containing values for a specific custom field of type <b>dropdown_large_list</b>. More details in the <a href="#custom_fields">Custom Fields section</a> """,
    tags=['custom_fields_management', 'file_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def custom_fields_upload(custom_field_id: conint(ge=1), file: UploadFile = ...):
    """
    Custom fields values files upload
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/institution/embargo_options',
    description=""" Account institution embargo options details """,
    tags=[
        'private_institution_account_management',
        'private_article_embargo_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_institution_embargo_options_details():
    """
    Private Account Institution embargo options
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/institution/groups',
    description=""" Returns the groups for which the account has administrative privileges (assigned and inherited). """,
    tags=[
        'private_institution_account_management',
        'custom_fields_management',
        'institution_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_institution_groups_list():
    """
    Private Account Institution Groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/institution/groups/{group_id}/embargo_options',
    description=""" Account institution group embargo options details """,
    tags=[
        'private_article_embargo_management',
        'private_institution_account_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_group_embargo_options_details(group_id: conint(ge=1)):
    """
    Private Account Institution Group Embargo Options
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/institution/review/{curation_id}',
    description=""" Retrieve a certain curation review by its ID """,
    tags=[
        'curation_review_handling',
        'private_institution_account_management',
        'institution_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def account_institution_curation(curation_id: conint(ge=1)):
    """
    Institution Curation Review
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/institution/review/{curation_id}/comments',
    description=""" Retrieve a certain curation review's comments. """,
    tags=['curation_review_handling', 'private_institution_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def account_institution_curation_comments(
    limit: Optional[conint(ge=1, le=1000)] = None,
    offset: Optional[conint(ge=0, le=5000)] = None,
    curation_id: conint(ge=1) = ...,
):
    """
    Institution Curation Review Comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/institution/review/{curation_id}/comments',
    description=""" Add a new comment to the review. """,
    tags=['curation_review_handling', 'institution_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def post_account_institution_review__curation_id_comments(
    curation_id: conint(ge=1), body: CurationCommentCreate = ...
):
    """
    POST Institution Curation Review Comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/institution/reviews',
    description=""" Retrieve a list of curation reviews for this institution """,
    tags=['curation_review_handling', 'private_institution_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def account_institution_curations(
    group_id: Optional[conint(ge=0)] = None,
    article_id: Optional[conint(ge=0)] = None,
    status: Optional[Status4] = None,
    limit: Optional[conint(ge=1, le=1000)] = None,
    offset: Optional[conint(ge=0, le=5000)] = None,
):
    """
    Institution Curation Reviews
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/institution/roles',
    description=""" Returns the roles available for groups and the institution group. """,
    tags=['private_institution_account_management', 'institution_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_institution_roles_list():
    """
    Private Account Institution Roles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/institution/roles/{account_id}',
    description=""" List Institution Account Group Roles """,
    tags=['private_institution_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_institution_account_group_roles(account_id: conint(ge=1)):
    """
    List Institution Account Group Roles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/institution/roles/{account_id}',
    description=""" Add Institution Account Group Roles """,
    tags=['private_institution_account_management', 'custom_fields_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_institution_account_group_roles_create(
    account_id: conint(ge=1), body: AccountGroupRolesCreate = ...
):
    """
    Add Institution Account Group Roles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/institution/roles/{account_id}/{group_id}/{role_id}',
    description=""" Delete Institution Account Group Role """,
    tags=['private_institution_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_institution_account_group_role_delete(
    account_id: conint(ge=1), group_id: conint(ge=1) = ..., role_id: conint(ge=1) = ...
):
    """
    Delete Institution Account Group Role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/institution/users/{account_id}',
    description=""" Retrieve institution user information using the account_id """,
    tags=['private_institution_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_account_institution_user(account_id: conint(ge=1)):
    """
    Private Account Institution User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/licenses',
    description=""" This is a private endpoint that requires OAuth. It will return a list with figshare public licenses AND licenses defined for account's institution. """,
    tags=['private_institution_account_management', 'license_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_licenses_list():
    """
    Private Account Licenses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/projects',
    description=""" List private projects """,
    tags=[
        'private_project_management',
        'project_article_handling',
        'project_collaboration_handling',
        'project_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_projects_list(
    page: Optional[conint(ge=1, le=5000)] = None,
    page_size: Optional[conint(ge=1, le=1000)] = 10,
    limit: Optional[conint(ge=1, le=1000)] = None,
    offset: Optional[conint(ge=0, le=5000)] = None,
    order: Optional[Order8] = 'published_date',
    order_direction: Optional[OrderDirection] = 'desc',
    storage: Optional[Storage1] = None,
    roles: Optional[str] = None,
):
    """
    Private Projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/projects',
    description=""" Create a new project """,
    tags=['private_project_management', 'project_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_create(body: ProjectCreate):
    """
    Create project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/projects/search',
    description=""" Search inside the private projects """,
    tags=[
        'private_project_management',
        'project_management',
        'project_article_handling',
        'project_collaboration_handling',
    ],
)
def private_projects_search(body: ProjectsSearch = None):
    """
    Private Projects search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/projects/{project_id}',
    description=""" A project can be deleted only if: - it is not public - it does not have public articles.

When an individual project is deleted, all the articles are moved to my data of each owner.

When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project.
 """,
    tags=['private_project_management', 'project_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_delete(project_id: conint(ge=1)):
    """
    Delete project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/projects/{project_id}',
    description=""" View a private project """,
    tags=['private_project_management', 'project_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_details(project_id: conint(ge=1)):
    """
    View project details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/projects/{project_id}',
    description=""" Updating an project by passing body parameters; request can also be made with the PATCH method. """,
    tags=['private_project_management', 'project_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_update(project_id: conint(ge=1), body: ProjectUpdate = ...):
    """
    Update project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/projects/{project_id}/articles',
    description=""" List project articles """,
    tags=[
        'private_article_crud',
        'private_project_management',
        'project_article_handling',
        'project_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_articles_list(
    project_id: conint(ge=1),
    page: Optional[conint(ge=1, le=5000)] = None,
    page_size: Optional[conint(ge=1, le=1000)] = 10,
    limit: Optional[conint(ge=1, le=1000)] = None,
    offset: Optional[conint(ge=0, le=5000)] = None,
):
    """
    List project articles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/projects/{project_id}/articles',
    description=""" Create a new Article and associate it with this project """,
    tags=[
        'private_article_crud',
        'private_project_management',
        'project_article_handling',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_articles_create(
    project_id: conint(ge=1),
    page: Optional[conint(ge=1, le=5000)] = None,
    page_size: Optional[conint(ge=1, le=1000)] = 10,
    limit: Optional[conint(ge=1, le=1000)] = None,
    offset: Optional[conint(ge=0, le=5000)] = None,
    body: ArticleProjectCreate = ...,
):
    """
    Create project article
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/projects/{project_id}/articles/{article_id}',
    description=""" Delete project article """,
    tags=[
        'private_article_crud',
        'private_article_management',
        'project_article_handling',
        'private_project_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_article_delete(
    project_id: conint(ge=1), article_id: conint(ge=1) = ...
):
    """
    Delete project article
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/projects/{project_id}/articles/{article_id}',
    description=""" Project article details """,
    tags=[
        'private_article_management',
        'project_article_handling',
        'private_project_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_article_details(
    project_id: conint(ge=1), article_id: conint(ge=1) = ...
):
    """
    Project article details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/projects/{project_id}/articles/{article_id}/files',
    description=""" List article files """,
    tags=[
        'private_article_file_management',
        'project_article_handling',
        'project_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_article_files(
    project_id: conint(ge=1), article_id: conint(ge=1) = ...
):
    """
    Project article list files
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/projects/{project_id}/articles/{article_id}/files/{file_id}',
    description=""" Project article file details """,
    tags=[
        'private_article_file_management',
        'project_article_handling',
        'project_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_article_file(
    project_id: conint(ge=1),
    article_id: conint(ge=1) = ...,
    file_id: conint(ge=1) = ...,
):
    """
    Project article file details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/projects/{project_id}/collaborators',
    description=""" List Project collaborators and invited users """,
    tags=[
        'private_project_management',
        'project_collaboration_handling',
        'project_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_collaborators_list(project_id: conint(ge=1)):
    """
    List project collaborators
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/projects/{project_id}/collaborators',
    description=""" Invite users to collaborate on project or view the project """,
    tags=[
        'private_project_management',
        'project_collaboration_handling',
        'project_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_collaborators_invite(
    project_id: conint(ge=1), body: ProjectCollaboratorInvite = ...
):
    """
    Invite project collaborators
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/projects/{project_id}/collaborators/{user_id}',
    description=""" Remove project collaborator """,
    tags=['private_project_management', 'project_collaboration_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_collaborator___delete(
    project_id: conint(ge=1), user_id: conint(ge=1) = ...
):
    """
    Remove project collaborator
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/projects/{project_id}/leave',
    description=""" Please note: project's owner cannot leave the project. """,
    tags=[
        'private_project_management',
        'project_management',
        'project_article_handling',
        'project_collaboration_handling',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_leave(project_id: conint(ge=1)):
    """
    Private Project Leave
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/projects/{project_id}/notes',
    description=""" List project notes """,
    tags=['project_note_handling', 'private_project_management', 'project_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_notes_list(
    page: Optional[conint(ge=1, le=5000)] = None,
    page_size: Optional[conint(ge=1, le=1000)] = 10,
    limit: Optional[conint(ge=1, le=1000)] = None,
    offset: Optional[conint(ge=0, le=5000)] = None,
    project_id: conint(ge=1) = ...,
):
    """
    List project notes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/projects/{project_id}/notes',
    description=""" Create a new project note """,
    tags=['project_note_handling', 'private_project_management', 'project_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_notes_create(
    project_id: conint(ge=1), body: ProjectNoteCreate = ...
):
    """
    Create project note
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/account/projects/{project_id}/notes/{note_id}',
    tags=['project_note_handling', 'private_project_management', 'project_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_note_delete(project_id: conint(ge=1), note_id: conint(ge=1) = ...):
    """
    Delete project note
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/projects/{project_id}/notes/{note_id}',
    tags=['project_note_handling', 'project_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_note(project_id: conint(ge=1), note_id: conint(ge=1) = ...):
    """
    Project note details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/projects/{project_id}/notes/{note_id}',
    tags=['project_note_handling', 'private_project_management', 'project_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_note_update(
    project_id: conint(ge=1), note_id: conint(ge=1) = ..., body: ProjectNoteCreate = ...
):
    """
    Update project note
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/projects/{project_id}/publish',
    description=""" Publish a project. Possible after all items inside it are public """,
    tags=[
        'private_project_management',
        'project_management',
        'project_collaboration_handling',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def private_project_publish(project_id: conint(ge=1)):
    """
    Private Project Publish
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/articles',
    description=""" Returns a list of public articles """,
    tags=['public_article_management', 'collection_management', 'category_management'],
)
def articles_list(
    x__cursor: Optional[UUID] = Header(None, alias='X-Cursor'),
    page: Optional[conint(ge=1, le=5000)] = None,
    page_size: Optional[conint(ge=1, le=1000)] = 10,
    limit: Optional[conint(ge=1, le=1000)] = None,
    offset: Optional[conint(ge=0, le=5000)] = None,
    order: Optional[Order10] = 'published_date',
    order_direction: Optional[OrderDirection] = 'desc',
    institution: Optional[int] = None,
    published_since: Optional[str] = None,
    modified_since: Optional[str] = None,
    group: Optional[int] = None,
    resource_doi: Optional[str] = None,
    item_type: Optional[int] = None,
    doi: Optional[str] = None,
    handle: Optional[str] = None,
):
    """
    Public Articles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/articles/search',
    description=""" Returns a list of public articles, filtered by the search parameters """,
    tags=['public_article_management', 'private_article_searching'],
)
def articles_search(
    x__cursor: Optional[UUID] = Header(None, alias='X-Cursor'),
    body: ArticleSearch = None,
):
    """
    Public Articles Search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/articles/{article_id}',
    description=""" View an article """,
    tags=[
        'private_article_crud',
        'private_article_management',
        'private_article_searching',
    ],
)
def article_details(article_id: conint(ge=1)):
    """
    View article details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/articles/{article_id}/files',
    description=""" Files list for article """,
    tags=['private_article_file_management', 'private_article_management'],
)
def article_files(article_id: conint(ge=1)):
    """
    List article files
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/articles/{article_id}/files/{file_id}',
    description=""" File by id """,
    tags=['private_article_file_management'],
)
def article_file_details(article_id: conint(ge=1), file_id: conint(ge=1) = ...):
    """
    Article file details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/articles/{article_id}/versions',
    description=""" List public article versions """,
    tags=['private_article_crud', 'private_article_management'],
)
def article_versions(article_id: conint(ge=1)):
    """
    List article versions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/articles/{article_id}/versions/{v_number}',
    description=""" Article with specified version """,
    tags=['private_article_management', 'private_article_crud'],
)
def article_version_details(article_id: conint(ge=1), v_number: conint(ge=1) = ...):
    """
    Article details for version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/articles/{article_id}/versions/{v_number}/confidentiality',
    description=""" Confidentiality for article version. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows. """,
    tags=['private_article_confidentiality_management'],
)
def article_version_confidentiality(
    article_id: conint(ge=1), v_number: conint(ge=1) = ...
):
    """
    Public Article Confidentiality for article version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/articles/{article_id}/versions/{v_number}/embargo',
    description=""" Embargo for article version """,
    tags=['private_article_embargo_management'],
)
def article_version_embargo(article_id: conint(ge=1), v_number: conint(ge=1) = ...):
    """
    Public Article Embargo for article version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/categories',
    description=""" Returns a list of public categories """,
    tags=['category_management', 'public_article_management'],
)
def categories_list():
    """
    Public Categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/collections',
    description=""" Returns a list of public collections """,
    tags=['collection_management', 'public_article_management'],
)
def collections_list(
    x__cursor: Optional[UUID] = Header(None, alias='X-Cursor'),
    page: Optional[conint(ge=1, le=5000)] = None,
    page_size: Optional[conint(ge=1, le=1000)] = 10,
    limit: Optional[conint(ge=1, le=1000)] = None,
    offset: Optional[conint(ge=0, le=5000)] = None,
    order: Optional[Order12] = 'published_date',
    order_direction: Optional[OrderDirection] = 'desc',
    institution: Optional[int] = None,
    published_since: Optional[str] = None,
    modified_since: Optional[str] = None,
    group: Optional[int] = None,
    resource_doi: Optional[str] = None,
    doi: Optional[str] = None,
    handle: Optional[str] = None,
):
    """
    Public Collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/collections/search',
    description=""" Returns a list of public collections """,
    tags=['collection_management', 'private_collection_management'],
)
def collections_search(
    x__cursor: Optional[UUID] = Header(None, alias='X-Cursor'),
    body: CollectionSearch = None,
):
    """
    Public Collections Search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/collections/{collection_id}',
    description=""" View a collection """,
    tags=['private_collection_management', 'private_collection_operations'],
)
def collection_details(collection_id: conint(ge=1)):
    """
    Collection details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/collections/{collection_id}/articles',
    description=""" Returns a list of public collection articles """,
    tags=['public_article_management', 'collection_management'],
)
def collection_articles(
    collection_id: conint(ge=1),
    page: Optional[conint(ge=1, le=5000)] = None,
    page_size: Optional[conint(ge=1, le=1000)] = 10,
    limit: Optional[conint(ge=1, le=1000)] = None,
    offset: Optional[conint(ge=0, le=5000)] = None,
):
    """
    Public Collection Articles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/collections/{collection_id}/versions',
    description=""" Returns a list of public collection Versions """,
    tags=[
        'private_collection_management',
        'private_collection_operations',
        'collection_management',
    ],
)
def collection_versions(collection_id: conint(ge=1)):
    """
    Collection Versions list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/collections/{collection_id}/versions/{version_id}',
    description=""" View details for a certain version of a collection """,
    tags=['private_collection_management', 'private_collection_operations'],
)
def collection_version_details(
    collection_id: conint(ge=1), version_id: conint(ge=1) = ...
):
    """
    Collection Version details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/file/download/{file_id}',
    description=""" Starts the download of a file """,
    tags=['file_operations', 'public_article_management'],
)
def file_download(file_id: conint(ge=1)):
    """
    Public File Download
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/institution/hrfeed/upload',
    description=""" More info in the <a href="#hr_feed">HR Feed section</a> """,
    tags=[
        'private_institution_account_management',
        'private_article_file_management',
        'file_operations',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def institution_hrfeed_upload(file: UploadFile):
    """
    Private Institution HRfeed Upload
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/institutions/{institution_string_id}/articles/filter-by',
    description=""" Returns a list of articles belonging to the institution """,
    tags=['institution_management', 'license_management'],
)
def institution_articles(
    institution_string_id: str, resource_id: str = ..., filename: str = ...
):
    """
    Public Licenses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/item_types',
    description=""" Returns the list of Item Types of the requested group. If no user is authenticated, returns the item types available for Figshare. """,
    tags=[
        'private_article_management',
        'private_article_authors_management',
        'private_collection_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def item_types_list(group_id: Optional[conint(ge=0)] = 0):
    """
    Item Types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/licenses',
    description=""" Returns a list of public licenses """,
    tags=['license_management', 'institution_management'],
)
def licenses_list():
    """
    Public Licenses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects',
    description=""" Returns a list of public projects """,
    tags=['project_management', 'public_article_management'],
)
def projects_list(
    x__cursor: Optional[UUID] = Header(None, alias='X-Cursor'),
    page: Optional[conint(ge=1, le=5000)] = None,
    page_size: Optional[conint(ge=1, le=1000)] = 10,
    limit: Optional[conint(ge=1, le=1000)] = None,
    offset: Optional[conint(ge=0, le=5000)] = None,
    order: Optional[Order14] = 'published_date',
    order_direction: Optional[OrderDirection] = 'desc',
    institution: Optional[int] = None,
    published_since: Optional[str] = None,
    group: Optional[int] = None,
):
    """
    Public Projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/projects/search',
    description=""" Returns a list of public articles """,
    tags=['project_management', 'public_article_management'],
)
def projects_search(
    x__cursor: Optional[UUID] = Header(None, alias='X-Cursor'),
    body: ProjectsSearch = None,
):
    """
    Public Projects Search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/{project_id}',
    description=""" View a project """,
    tags=['private_project_management', 'project_management'],
)
def project_details(project_id: conint(ge=1)):
    """
    Public Project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/projects/{project_id}/articles',
    description=""" List articles in project """,
    tags=[
        'private_project_management',
        'project_article_handling',
        'project_management',
    ],
)
def project_articles(project_id: conint(ge=1)):
    """
    Public Project Articles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
